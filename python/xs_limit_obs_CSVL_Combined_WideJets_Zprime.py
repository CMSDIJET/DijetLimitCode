#!/usr/bin/env python

import sys, os, subprocess, string, re
from ROOT import *
from array import array


gROOT.SetBatch(kTRUE);
gStyle.SetOptStat(0)
gStyle.SetOptTitle(0)
gStyle.SetTitleFont(42, "XYZ")
gStyle.SetTitleSize(0.06, "XYZ")
gStyle.SetLabelFont(42, "XYZ")
gStyle.SetLabelSize(0.05, "XYZ")
gStyle.SetCanvasBorderMode(0)
gStyle.SetFrameBorderMode(0)
gStyle.SetCanvasColor(kWhite)
gStyle.SetPadTickX(1)
gStyle.SetPadTickY(1)
gStyle.SetPadLeftMargin(0.15)
gStyle.SetPadRightMargin(0.05)
gStyle.SetPadTopMargin(0.05)
gStyle.SetPadBottomMargin(0.15)
gROOT.ForceStyle()

sys = True
#sys = False

BR = [0.2, 0.5, 0.75, 1.]

masses = array('d')
xs_limits = {}

########################################################
## Uncomment this part if running the limit code

#mass_start = 1000.
#mass_step = 100.
#steps = 30

#for br in range(0,len(BR)):

  #xs_limits_array = array('d')

  #for i in range(0,steps+1):

    #mass = mass_start + float(i)*mass_step

    #if(br==0): masses.append(mass)

    #cmd = "./stats " + str(mass) + " " + str(BR[br]) + " qq"
    #print "Running: " + cmd
    #proc = subprocess.Popen( cmd, shell=True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT )
    #output = proc.communicate()[0]
    #if proc.returncode != 0:
      #print output
      #sys.exit(1)
    ##print output
    #outputlines =  output.split("\n")

    #for line in outputlines:
      #if re.search("observed bound =", line):
        #xs_limits_array.append(float(line.split()[6]))

  #xs_limits[br] = xs_limits_array


#print "masses:"
#print masses
#for br in range(0,len(BR)):
  #print "xs_limits, BR="+str(BR[br])+":"
  #print xs_limits[br]

##
########################################################

########################################################
## Comment out this part if running the limit code

# stat only
masses = array('d', [1000.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0])
xs_limits[0] = array('d', [0.50626099999999996, 0.342339, 0.238422, 0.14901200000000001, 0.111759, 0.12441199999999999, 0.096867800000000004, 0.074505799999999997, 0.052154100000000002, 0.0447035, 0.060471299999999999, 0.057321900000000002, 0.039640799999999997, 0.030077699999999999, 0.029032499999999999, 0.029572899999999999, 0.0239779, 0.015988200000000001, 0.011177299999999999, 0.0079163700000000007, 0.0060536100000000001, 0.0041909499999999997, 0.0032596299999999999, 0.0032596299999999999, 0.0032596299999999999, 0.0032596499999999998, 0.0030268000000000001, 0.0027940600000000001, 0.0023289700000000001, 0.0020954799999999998, 0.00174624])
xs_limits[1] = array('d', [0.40445599999999998, 0.31949499999999997, 0.20873900000000001, 0.119209, 0.089407, 0.096857499999999999, 0.089412500000000006, 0.078558600000000006, 0.055879400000000003, 0.048428800000000001, 0.059702199999999997, 0.055275499999999998, 0.040337100000000001, 0.031572599999999999, 0.029849899999999999, 0.0307668, 0.025246500000000002, 0.017207799999999999, 0.0121073, 0.0088476100000000005, 0.0065192599999999998, 0.0046566200000000002, 0.00372529, 0.0034924600000000002, 0.00372529, 0.0034924600000000002, 0.0032596299999999999, 0.0030268000000000001, 0.0026775599999999998, 0.0023283100000000001, 0.00186265])
xs_limits[2] = array('d', [0.29643199999999997, 0.26441999999999999, 0.17308799999999999, 0.104308, 0.067055900000000002, 0.070780499999999996, 0.074509199999999998, 0.075192099999999998, 0.058293600000000001, 0.048650400000000003, 0.053521899999999997, 0.0494058, 0.037959800000000002, 0.0304595, 0.029635399999999999, 0.0301388, 0.025531499999999999, 0.018058299999999999, 0.0124703, 0.0093132500000000003, 0.0069849200000000004, 0.0051222699999999999, 0.0041909499999999997, 0.00372529, 0.00372529, 0.0037253500000000001, 0.0032596299999999999, 0.0030268000000000001, 0.0027939699999999998, 0.0023283100000000001, 0.0020954900000000002])
xs_limits[3] = array('d', [0.23189299999999999, 0.21570400000000001, 0.142873, 0.089408199999999993, 0.059604600000000001, 0.055879400000000003, 0.063330200000000003, 0.068946099999999996, 0.055141500000000003, 0.047260700000000003, 0.045235699999999997, 0.041274600000000002, 0.034078700000000003, 0.028853400000000001, 0.027792399999999998, 0.028545000000000001, 0.024106300000000001, 0.017650699999999998, 0.0129011, 0.0093133699999999996, 0.0074505999999999999, 0.0055879399999999996, 0.0046566100000000003, 0.0041909499999999997, 0.0041909800000000004, 0.0039581199999999999, 0.0034924600000000002, 0.0032596399999999998, 0.0030268600000000001, 0.0025611399999999999, 0.0020954799999999998])

if sys:
 ## sys + stat
 masses = array('d', [1000.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0])
 xs_limits[0] = array('d', [0.53606299999999996, 0.38704300000000003, 0.25332300000000002, 0.163913, 0.12665999999999999, 0.120687, 0.10431799999999999, 0.081956399999999999, 0.059604600000000001, 0.055879400000000003, 0.062334000000000001, 0.058253300000000001, 0.0498853, 0.036596900000000002, 0.029963799999999999, 0.0291072, 0.026771900000000001, 0.0229731, 0.0167653, 0.010710300000000001, 0.0074505999999999999, 0.0051222699999999999, 0.00372529, 0.0034924600000000002, 0.0032596299999999999, 0.0032596499999999998, 0.0030268000000000001, 0.0027940600000000001, 0.0025617999999999999, 0.0023283100000000001, 0.0018626599999999999])
 xs_limits[1] = array('d', [0.43425900000000001, 0.35674800000000001, 0.23109099999999999, 0.14901200000000001, 0.104308, 0.096857499999999999, 0.093137700000000004, 0.082283899999999993, 0.063329899999999995, 0.057742000000000002, 0.059702199999999997, 0.057138099999999997, 0.048718999999999998, 0.036229200000000003, 0.031712499999999998, 0.0307668, 0.028506099999999999, 0.0246584, 0.018626500000000001, 0.011175900000000001, 0.00745058, 0.0055879399999999996, 0.0041909499999999997, 0.00372529, 0.00372529, 0.0034924600000000002, 0.0032596299999999999, 0.0030268000000000001, 0.0027939699999999998, 0.0023283100000000001, 0.0020954799999999998])
 xs_limits[2] = array('d', [0.326235, 0.286771, 0.20289099999999999, 0.119209, 0.081957100000000005, 0.074505799999999997, 0.081959799999999999, 0.075192099999999998, 0.065744200000000003, 0.054238300000000003, 0.055384500000000003, 0.052199799999999998, 0.043547700000000002, 0.035116099999999997, 0.031498100000000001, 0.0301388, 0.0283255, 0.024111899999999999, 0.018989599999999999, 0.0121072, 0.0083818999999999994, 0.0065192599999999998, 0.0051222699999999999, 0.0041909499999999997, 0.00372529, 0.0037253500000000001, 0.0034924600000000002, 0.0032596299999999999, 0.0030268000000000001, 0.0025611399999999999, 0.00232832])
 xs_limits[3] = array('d', [0.254245, 0.23805499999999999, 0.16522500000000001, 0.104309, 0.067055199999999995, 0.059604600000000001, 0.067055500000000004, 0.067083400000000001, 0.060729400000000003, 0.050985999999999997, 0.048960999999999998, 0.044999900000000002, 0.037803999999999997, 0.032578700000000002, 0.0296551, 0.028545000000000001, 0.026434599999999999, 0.023238700000000001, 0.018488999999999998, 0.0130387, 0.0093132500000000003, 0.0069849300000000003, 0.0055879399999999996, 0.0046566100000000003, 0.0041909800000000004, 0.00372529, 0.00372529, 0.0032596399999999998, 0.00325969, 0.0027939699999999998, 0.0023283100000000001])

 ##
########################################################

m_x = array('d', [500., 600.,  700., 800., 900., 1000., 1100., 1200., 1300., 1400., 1500., 1600., 1700., 1800., 1900., 2000., 2100., 2200., 2300., 2400., 2500., 2600., 2700., 2800., 2900., 3000., 3100., 3200., 3300., 3400., 3500., 3600., 3700., 3800., 3900., 4000., 4100., 4200., 4300., 4400., 4500.])
m_zprime = array('d', [700., 800., 900., 1000., 1100., 1200., 1300., 1400., 1500., 1600., 1700., 1800., 1900., 2000., 2100., 2200., 2300., 2400., 2500., 2600., 2700., 2800.])
m_scoct = array('d', [700., 1000., 1200., 1400., 1700., 2100., 2700.])
#zprime = array('d', [0.2555E+02, 0.1211E+02, 0.6246E+01, 0.3427E+01, 0.1969E+01, 0.1172E+01, 0.7171E+00, 0.4486E+00, 0.2857E+00, 0.1845E+00, 0.1206E+00, 0.7961E-01, 0.5295E-01, 0.3545E-01, 0.2386E-01, 0.1611E-01, 0.1092E-01, 0.7413E-02, 0.5039E-02, 0.3426E-02, 0.2329E-02, 0.1580E-02, 0.1070E-02, 0.7231E-03, 0.4867E-03, 0.3261E-03, 0.2174E-03, 0.1440E-03, 0.9477E-04, 0.6190E-04, 0.4007E-04])
zprime = array('d', [0.6246E+01, 0.3427E+01, 0.1969E+01, 0.1172E+01, 0.7171E+00, 0.4486E+00, 0.2857E+00, 0.1845E+00, 0.1206E+00, 0.7961E-01, 0.5295E-01, 0.3545E-01, 0.2386E-01, 0.1611E-01, 0.1092E-01, 0.7413E-02, 0.5039E-02, 0.3426E-02, 0.2329E-02, 0.1580E-02, 0.1070E-02, 0.7231E-03, 0.4867E-03, 0.3261E-03, 0.2174E-03, 0.1440E-03, 0.9477E-04, 0.6190E-04, 0.4007E-04])
rsg = array('d', [0.4828E+02, 0.1862E+02, 0.8100E+01, 0.3852E+01, 0.1961E+01, 0.1053E+01, 0.5905E+00, 0.3426E+00, 0.2044E+00, 0.1248E+00, 0.7770E-01, 0.4911E-01, 0.3145E-01, 0.2036E-01, 0.1330E-01, 0.8743E-02, 0.5781E-02, 0.3840E-02, 0.2559E-02, 0.1708E-02, 0.1142E-02, 0.7635E-03, 0.5101E-03, 0.3402E-03, 0.2264E-03, 0.1501E-03, 0.9913E-04, 0.6512E-04, 0.4253E-04, 0.2759E-04, 0.1775E-04])
scoct = array('d', [6.52288, 0.995265, 0.319478, 0.108527, 0.0235598, 0.00331955, 0.000188328])


graphs = {}

for br in range(0,len(BR)):
  graphs[br] = TGraph(len(masses),masses,xs_limits[br])
  graphs[br].SetMarkerStyle(24+br)
  graphs[br].SetMarkerColor(kRed)
  graphs[br].SetLineWidth(2)
  graphs[br].SetLineStyle(1+br)
  graphs[br].SetLineColor(kRed)
  if br==0:
    graphs[br].GetXaxis().SetTitle("Resonance Mass [GeV]")
    graphs[br].GetYaxis().SetTitle("#sigma#timesBR(X#rightarrowjj)#timesA [pb]")
    graphs[br].GetYaxis().SetRangeUser(1e-03,10)
    graphs[br].GetXaxis().SetNdivisions(1005)

graph_zprime = TGraph(len(m_zprime),m_zprime,zprime)
graph_zprime.SetLineWidth(2)
graph_zprime.SetLineStyle(4)
graph_zprime.SetLineColor(32)

graph_rsg = TGraph(len(m_x),m_x,rsg)
graph_rsg.SetLineWidth(2)
graph_rsg.SetLineStyle(8)
graph_rsg.SetLineColor(46)

graph_scoct = TGraph(len(m_scoct),m_scoct,scoct)
graph_scoct.SetLineWidth(2)
graph_scoct.SetLineStyle(8)
graph_scoct.SetLineColor(kBlue)

c = TCanvas("c", "",800,800)
c.cd()

for br in range(0,len(BR)):
  if br==0:
    graphs[br].Draw("ALP")
  else:
    graphs[br].Draw("LP")

graph_zprime.Draw("L")
#graph_scoct.Draw("L")

legend = TLegend(.45,.60,.85,.80)
legend.SetBorderSize(0)
legend.SetFillColor(0)
legend.SetFillStyle(0)
legend.SetTextFont(42)
legend.SetTextSize(0.03)
if sys: legend.SetHeader("Obs. 95% CL Upper Limits")
else:   legend.SetHeader("Obs. 95% CL Upper Limits (stat. only)")
for br in range(0,len(BR)):
  legend.AddEntry(graphs[br], "f_{b#bar{b}} = " + str(BR[br]),"lp")
legend.Draw()

legend2 = TLegend(.45,.80,.85,.85)
legend2.SetBorderSize(0)
legend2.SetFillColor(0)
legend2.SetFillStyle(0)
legend2.SetTextFont(42)
legend2.SetTextSize(0.03)
legend2.AddEntry(graph_zprime,"Z' (f_{b#bar{b}} #approx 0.2)","l")
legend2.Draw()

l1 = TLatex()
l1.SetTextAlign(12)
l1.SetTextFont(42)
l1.SetNDC()
l1.SetTextSize(0.035)
l1.DrawLatex(0.70,0.52, "f_{b#bar{b}} = #frac{BR(X#rightarrowb#bar{b})}{BR(X#rightarrowjj)}")
l1.SetTextSize(0.04)
l1.DrawLatex(0.18,0.89, "Z'-like")
l1.SetTextSize(0.04)
l1.DrawLatex(0.18,0.43, "CMS Preliminary")
l1.DrawLatex(0.18,0.35, "#intLdt = 5 fb^{-1}")
l1.DrawLatex(0.19,0.30, "#sqrt{s} = 7 TeV")
l1.DrawLatex(0.18,0.25, "|#eta| < 2.5, |#Delta#eta| < 1.3")
l1.DrawLatex(0.18,0.20, "Wide Jets")
l1.SetTextSize(0.055)
l1.DrawLatex(0.54,0.89, "0, 1 and 2 b-tags")

c.SetLogy()
if sys: c.SaveAs('CSVL_Combined_limit_obs_sys_WideJets_Zprime.eps')
else:   c.SaveAs('CSVL_Combined_limit_obs_WideJets_Zprime.eps')

