#!/usr/bin/env python

import sys, os, subprocess, string, re
from ROOT import *
from array import array


gROOT.SetBatch(kTRUE);
gStyle.SetOptStat(0)
gStyle.SetOptTitle(0)
gStyle.SetTitleFont(42, "XYZ")
gStyle.SetTitleSize(0.06, "XYZ")
gStyle.SetLabelFont(42, "XYZ")
gStyle.SetLabelSize(0.05, "XYZ")
gStyle.SetCanvasBorderMode(0)
gStyle.SetFrameBorderMode(0)
gStyle.SetCanvasColor(kWhite)
gStyle.SetPadTickX(1)
gStyle.SetPadTickY(1)
gStyle.SetPadLeftMargin(0.15)
gStyle.SetPadRightMargin(0.05)
gStyle.SetPadTopMargin(0.05)
gStyle.SetPadBottomMargin(0.15)
gROOT.ForceStyle()


BR = [0.2, 0.5, 0.75, 1.]

masses = array('d')
xs_limits = {}

########################################################
## Uncomment this part if running the limit code

#mass_start = 1000.
#mass_step = 100.
#steps = 30

#for br in range(0,len(BR)):

  #xs_limits_array = array('d')

  #for i in range(0,steps+1):

    #mass = mass_start + float(i)*mass_step

    #if(br==0): masses.append(mass)

    #cmd = "./stats " + str(mass) + " " + str(BR[br]) + " qq"
    #print "Running: " + cmd
    #proc = subprocess.Popen( cmd, shell=True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT )
    #output = proc.communicate()[0]
    #if proc.returncode != 0:
      #print output
      #sys.exit(1)
    ##print output
    #outputlines =  output.split("\n")

    #for line in outputlines:
      #if re.search("observed bound =", line):
        #xs_limits_array.append(float(line.split()[6]))

  #xs_limits[br] = xs_limits_array


#print "masses:"
#print masses
#for br in range(0,len(BR)):
  #print "xs_limits, BR="+str(BR[br])+":"
  #print xs_limits[br]

##
########################################################

########################################################
## Comment out this part if running the limit code

# stat only
#masses = array('d', [1000.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0])
#xs_limits[0] = array('d', [0.53305999999999998, 0.36081600000000003, 0.25806499999999999, 0.14674400000000001, 0.11867900000000001, 0.127364, 0.100531, 0.078217599999999998, 0.052091800000000001, 0.0484051, 0.0614964, 0.058875299999999998, 0.042489800000000001, 0.0315917, 0.0290867, 0.030483, 0.0253298, 0.017304300000000002, 0.0121587, 0.0088476100000000005, 0.00651922, 0.0046565599999999997, 0.00349241, 0.0032595900000000001, 0.0034924499999999998, 0.00325961, 0.0030267900000000001, 0.0027939699999999998, 0.0026776299999999999, 0.00221193, 0.0018626599999999999])
#xs_limits[1] = array('d', [0.41636600000000001, 0.331374, 0.21882599999999999, 0.125914, 0.088424100000000005, 0.096622899999999998, 0.089236599999999999, 0.078864199999999995, 0.0595855, 0.050283799999999997, 0.058873300000000003, 0.055271899999999999, 0.0417813, 0.032859100000000002, 0.030802, 0.031912599999999999, 0.026244, 0.018254900000000001, 0.012918600000000001, 0.00931302, 0.0065190700000000001, 0.0051222100000000003, 0.0037252000000000001, 0.0037252700000000001, 0.0037252600000000002, 0.0034924399999999999, 0.00325962, 0.0030268000000000001, 0.0027939599999999998, 0.0023283000000000002, 0.00186264])
#xs_limits[2] = array('d', [0.29345199999999999, 0.26507500000000001, 0.173428, 0.104102, 0.074464900000000001, 0.070632399999999998, 0.078223799999999996, 0.075439900000000004, 0.058817099999999997, 0.0486626, 0.053016800000000003, 0.05015, 0.039049899999999999, 0.031525900000000003, 0.029607999999999999, 0.030168899999999998, 0.0257369, 0.018337699999999998, 0.0131664, 0.0093129700000000003, 0.0069847399999999997, 0.00558786, 0.0041908900000000001, 0.00372522, 0.0037252399999999999, 0.0037252700000000001, 0.00325961, 0.0030267900000000001, 0.0027939499999999999, 0.0023283000000000002, 0.0020954799999999998])
#xs_limits[3] = array('d', [0.23127500000000001, 0.215395, 0.14285500000000001, 0.089397599999999994, 0.0595901, 0.055835500000000003, 0.063299800000000003, 0.068943599999999994, 0.055132, 0.047252200000000001, 0.045231100000000003, 0.041271700000000001, 0.034077200000000002, 0.028852599999999999, 0.027791799999999998, 0.028545000000000001, 0.024106200000000001, 0.0176505, 0.0129009, 0.0093129400000000005, 0.0074504599999999999, 0.0055876700000000003, 0.0046565900000000004, 0.0041909, 0.0041909499999999997, 0.0039581099999999999, 0.0034924499999999998, 0.0032596299999999999, 0.0030268500000000002, 0.00256113, 0.0020954599999999999])

# sys + stat
masses = array('d', [1000.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0])
xs_limits[0] = array('d', [0.54359199999999996, 0.398428, 0.268459, 0.17521200000000001, 0.13389200000000001, 0.12742100000000001, 0.10405399999999999, 0.081722100000000006, 0.059362199999999997, 0.057731600000000001, 0.063362399999999999, 0.060725500000000002, 0.051800499999999999, 0.039042800000000003, 0.031881100000000002, 0.030482800000000001, 0.028123800000000001, 0.024288899999999999, 0.017745299999999999, 0.0121073, 0.0074480199999999996, 0.0055874200000000001, 0.00419076, 0.0037252399999999999, 0.0034924399999999999, 0.00325961, 0.0030267800000000002, 0.0030268000000000001, 0.0027940399999999998, 0.00232833, 0.0020954799999999998])
xs_limits[1] = array('d', [0.42949500000000002, 0.36055399999999999, 0.24822, 0.14230200000000001, 0.095841200000000001, 0.096592800000000006, 0.093023700000000001, 0.082500699999999996, 0.06701, 0.0577219, 0.060736999999999999, 0.058028099999999999, 0.049223099999999999, 0.038434999999999997, 0.0326643, 0.031912700000000002, 0.029028000000000002, 0.025236100000000001, 0.018964399999999999, 0.012104500000000001, 0.0083797999999999997, 0.0065190999999999999, 0.0046564400000000004, 0.0037251599999999999, 0.0037252499999999998, 0.0034924299999999999, 0.00325961, 0.0030267699999999998, 0.0027939499999999999, 0.0025611200000000001, 0.00209545])
xs_limits[2] = array('d', [0.322828, 0.28712599999999999, 0.203652, 0.11662400000000001, 0.081454100000000002, 0.074169600000000002, 0.081916699999999995, 0.075410500000000005, 0.0662499, 0.0561223, 0.054876300000000003, 0.0519791, 0.043691599999999997, 0.036181999999999999, 0.031470400000000003, 0.0301686, 0.028526099999999999, 0.024856900000000001, 0.019217399999999999, 0.0130381, 0.0093130499999999998, 0.0065187500000000002, 0.0051220600000000003, 0.0041908700000000002, 0.00372522, 0.0037252499999999998, 0.0034924399999999999, 0.00325962, 0.0030267800000000002, 0.0025611000000000002, 0.0023282899999999998])
xs_limits[3] = array('d', [0.25316499999999997, 0.237844, 0.16478300000000001, 0.104127, 0.066863599999999995, 0.059444900000000002, 0.066973599999999994, 0.067045599999999997, 0.060704300000000003, 0.050973600000000001, 0.048958500000000002, 0.044998499999999997, 0.0377655, 0.032576899999999999, 0.029654699999999999, 0.0285446, 0.026434200000000001, 0.0232372, 0.018488399999999999, 0.0130382, 0.0093130599999999997, 0.0069848999999999996, 0.0055877799999999997, 0.0046565900000000004, 0.0041909499999999997, 0.0037252299999999999, 0.0037252700000000001, 0.00325961, 0.00325969, 0.00279394, 0.0023282699999999999])

##
########################################################

m_x = array('d', [500., 600.,  700., 800., 900., 1000., 1100., 1200., 1300., 1400., 1500., 1600., 1700., 1800., 1900., 2000., 2100., 2200., 2300., 2400., 2500., 2600., 2700., 2800., 2900., 3000., 3100., 3200., 3300., 3400., 3500., 3600., 3700., 3800., 3900., 4000., 4100., 4200., 4300., 4400., 4500.])
m_zprime = array('d', [700., 800., 900., 1000., 1100., 1200., 1300., 1400., 1500., 1600., 1700., 1800., 1900., 2000., 2100., 2200., 2300., 2400., 2500., 2600., 2700., 2800.])
#zprime = array('d', [0.2555E+02, 0.1211E+02, 0.6246E+01, 0.3427E+01, 0.1969E+01, 0.1172E+01, 0.7171E+00, 0.4486E+00, 0.2857E+00, 0.1845E+00, 0.1206E+00, 0.7961E-01, 0.5295E-01, 0.3545E-01, 0.2386E-01, 0.1611E-01, 0.1092E-01, 0.7413E-02, 0.5039E-02, 0.3426E-02, 0.2329E-02, 0.1580E-02, 0.1070E-02, 0.7231E-03, 0.4867E-03, 0.3261E-03, 0.2174E-03, 0.1440E-03, 0.9477E-04, 0.6190E-04, 0.4007E-04])
zprime = array('d', [0.6246E+01, 0.3427E+01, 0.1969E+01, 0.1172E+01, 0.7171E+00, 0.4486E+00, 0.2857E+00, 0.1845E+00, 0.1206E+00, 0.7961E-01, 0.5295E-01, 0.3545E-01, 0.2386E-01, 0.1611E-01, 0.1092E-01, 0.7413E-02, 0.5039E-02, 0.3426E-02, 0.2329E-02, 0.1580E-02, 0.1070E-02, 0.7231E-03, 0.4867E-03, 0.3261E-03, 0.2174E-03, 0.1440E-03, 0.9477E-04, 0.6190E-04, 0.4007E-04])
rsg = array('d', [0.4828E+02, 0.1862E+02, 0.8100E+01, 0.3852E+01, 0.1961E+01, 0.1053E+01, 0.5905E+00, 0.3426E+00, 0.2044E+00, 0.1248E+00, 0.7770E-01, 0.4911E-01, 0.3145E-01, 0.2036E-01, 0.1330E-01, 0.8743E-02, 0.5781E-02, 0.3840E-02, 0.2559E-02, 0.1708E-02, 0.1142E-02, 0.7635E-03, 0.5101E-03, 0.3402E-03, 0.2264E-03, 0.1501E-03, 0.9913E-04, 0.6512E-04, 0.4253E-04, 0.2759E-04, 0.1775E-04])


graphs = {}

for br in range(0,len(BR)):
  graphs[br] = TGraph(len(masses),masses,xs_limits[br])
  graphs[br].SetMarkerStyle(24+br)
  graphs[br].SetMarkerColor(kRed)
  graphs[br].SetLineWidth(2)
  graphs[br].SetLineStyle(1+br)
  graphs[br].SetLineColor(kRed)
  if br==0:
    graphs[br].GetXaxis().SetTitle("Resonance Mass [GeV]")
    graphs[br].GetYaxis().SetTitle("#sigma#timesBR(X#rightarrowjj)#timesA [pb]")
    graphs[br].GetYaxis().SetRangeUser(1e-03,10)

graph_zprime = TGraph(len(m_zprime),m_zprime,zprime)
graph_zprime.SetLineWidth(2)
graph_zprime.SetLineStyle(4)
graph_zprime.SetLineColor(32)

graph_rsg = TGraph(len(m_x),m_x,rsg)
graph_rsg.SetLineWidth(2)
graph_rsg.SetLineStyle(8)
graph_rsg.SetLineColor(46)

c = TCanvas("c", "",800,800)
c.cd()

for br in range(0,len(BR)):
  if br==0:
    graphs[br].Draw("ALP")
  else:
    graphs[br].Draw("LP")

graph_zprime.Draw("L")

legend = TLegend(.45,.60,.85,.80)
legend.SetBorderSize(0)
legend.SetFillColor(0)
legend.SetFillStyle(0)
legend.SetTextFont(42)
legend.SetTextSize(0.03)
#legend.SetHeader("Obs. 95% CL Upper Limits (stat. only)")
legend.SetHeader("Obs. 95% CL Upper Limits")
for br in range(0,len(BR)):
  legend.AddEntry(graphs[br], "f_{b#bar{b}} = " + str(BR[br]),"lp")
legend.Draw()

legend2 = TLegend(.45,.80,.85,.85)
legend2.SetBorderSize(0)
legend2.SetFillColor(0)
legend2.SetFillStyle(0)
legend2.SetTextFont(42)
legend2.SetTextSize(0.03)
legend2.AddEntry(graph_zprime,"Z' (f_{b#bar{b}} #approx 0.2)","l")
legend2.Draw()

l1 = TLatex()
l1.SetTextAlign(12)
l1.SetTextFont(42)
l1.SetNDC()
l1.SetTextSize(0.035)
l1.DrawLatex(0.70,0.50, "f_{b#bar{b}} = #frac{BR(X#rightarrowb#bar{b})}{BR(X#rightarrowjj)}")
l1.SetTextSize(0.04)
l1.DrawLatex(0.19,0.88, "Z'-like")
l1.SetTextSize(0.04)
l1.DrawLatex(0.19,0.43, "CMS Preliminary")
l1.DrawLatex(0.19,0.35, "#intLdt = 5 fb^{-1}")
l1.DrawLatex(0.20,0.30, "#sqrt{s} = 7 TeV")
l1.DrawLatex(0.19,0.25, "|#eta| < 2.5, |#Delta#eta| < 1.3")
l1.DrawLatex(0.19,0.20, "Wide Jets")
l1.SetTextSize(0.05)
l1.DrawLatex(0.53,0.20, "0, 1 and 2 b-tags")

c.SetLogy()
#c.SaveAs('CSVL_Combined_limit_obs_WideJets_Zprime.eps')
c.SaveAs('CSVL_Combined_limit_obs_sys_WideJets_Zprime.eps')

