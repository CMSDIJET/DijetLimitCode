#!/usr/bin/env python

import sys, os, subprocess, string, re
from ROOT import *
from array import array


gROOT.SetBatch(kTRUE);
gStyle.SetOptStat(0)
gStyle.SetOptTitle(0)
gStyle.SetTitleFont(42, "XYZ")
gStyle.SetTitleSize(0.06, "XYZ")
gStyle.SetLabelFont(42, "XYZ")
gStyle.SetLabelSize(0.05, "XYZ")
gStyle.SetCanvasBorderMode(0)
gStyle.SetFrameBorderMode(0)
gStyle.SetCanvasColor(kWhite)
gStyle.SetPadTickX(1)
gStyle.SetPadTickY(1)
gStyle.SetPadLeftMargin(0.15)
gStyle.SetPadRightMargin(0.05)
gStyle.SetPadTopMargin(0.05)
gStyle.SetPadBottomMargin(0.15)
gROOT.ForceStyle()

sys = True
#sys = False

BR = [0.1, 0.5, 0.75, 1.]

masses = array('d')
xs_limits = {}

########################################################
## Uncomment this part if running the limit code

#mass_start = 1000.
#mass_step = 100.
#steps = 30

## for running the limit code
#for br in range(0,len(BR)):

  #xs_limits_array = array('d')

  #for i in range(0,steps+1):

    #mass = mass_start + float(i)*mass_step

    #if(br==0): masses.append(mass)

    #cmd = "./stats " + str(mass) + " " + str(BR[br]) + " gg"
    #print "Running: " + cmd
    #proc = subprocess.Popen( cmd, shell=True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT )
    #output = proc.communicate()[0]
    #if proc.returncode != 0:
      #print output
      #sys.exit(1)
    ##print output
    #outputlines =  output.split("\n")

    #for line in outputlines:
      #if re.search("observed bound =", line):
        #xs_limits_array.append(float(line.split()[6]))

  #xs_limits[br] = xs_limits_array


## for reading the limit code log files
#for br in range(0,len(BR)):

  #xs_limits_array = array('d')

  #for i in range(0,steps+1):

    #mass = mass_start + float(i)*mass_step

    #if(br==0): masses.append(mass)

    #log_file = open("stats_" + str(int(mass)) + "_" + str(BR[br]) + "_gg.log",'r')
    #outputlines = log_file.readlines()
    #log_file.close()

    #for line in outputlines:
      #if re.search("observed bound =", line):
        #xs_limits_array.append(float(line.split()[6]))

  #xs_limits[br] = xs_limits_array


#print "masses:"
#print masses
#for br in range(0,len(BR)):
  #print "xs_limits, BR="+str(BR[br])+":"
  #print xs_limits[br]

##
########################################################

########################################################
## Comment out this part if running the limit code

# stat only
masses = array('d', [1000.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0])
xs_limits[0] = array('d', [3.7675900000000002, 1.4491799999999999, 0.507162, 0.29525899999999999, 0.20686099999999999, 0.195635, 0.18909100000000001, 0.15102599999999999, 0.10151399999999999, 0.078154299999999996, 0.087327299999999997, 0.14263500000000001, 0.108197, 0.074183700000000005, 0.061316099999999998, 0.065842200000000004, 0.060899399999999999, 0.043598499999999998, 0.0241683, 0.016130200000000001, 0.0124873, 0.0094100699999999995, 0.0069556000000000002, 0.0059999800000000002, 0.0062567899999999999, 0.0061707799999999998, 0.0051117799999999998, 0.0053428599999999996, 0.0048346600000000002, 0.0040833800000000002, 0.00377341])
xs_limits[1] = array('d', [1.18777, 1.0565599999999999, 0.30576399999999998, 0.155527, 0.10759100000000001, 0.100947, 0.107927, 0.135515, 0.084655900000000006, 0.065122600000000003, 0.076994599999999996, 0.090357499999999993, 0.069362199999999999, 0.051866799999999998, 0.048827299999999997, 0.053701600000000002, 0.047150200000000003, 0.031871299999999998, 0.018550299999999999, 0.0129099, 0.0100804, 0.0074750900000000002, 0.0059274699999999998, 0.0051902199999999997, 0.0053258100000000003, 0.00508882, 0.00434951, 0.0042000500000000003, 0.00380935, 0.0032894, 0.0030315300000000002])
xs_limits[2] = array('d', [0.77474699999999996, 0.748811, 0.21080399999999999, 0.111429, 0.077063599999999996, 0.074287300000000001, 0.083230799999999994, 0.11197500000000001, 0.076513300000000006, 0.056285099999999998, 0.065682400000000002, 0.068374699999999997, 0.052392300000000003, 0.041053600000000003, 0.040838800000000001, 0.0455927, 0.038851799999999999, 0.025993200000000001, 0.015711699999999999, 0.0116708, 0.0087115200000000004, 0.0066150599999999999, 0.0052345999999999998, 0.0047583, 0.0048198700000000004, 0.0045422800000000001, 0.0039594599999999997, 0.0036822199999999999, 0.0033456499999999999, 0.0030002200000000001, 0.0026040500000000001])
xs_limits[3] = array('d', [0.56668799999999997, 0.58086000000000004, 0.17114699999999999, 0.089566499999999993, 0.059730699999999998, 0.056915300000000002, 0.064923800000000004, 0.091563800000000001, 0.066524299999999995, 0.051226899999999999, 0.056009000000000003, 0.053176099999999997, 0.041119599999999999, 0.033465799999999997, 0.034853299999999997, 0.038552099999999999, 0.032492, 0.0215675, 0.0135388, 0.010174300000000001, 0.0076462500000000003, 0.0060970299999999998, 0.0046936, 0.0043732399999999996, 0.0043788999999999998, 0.0040874099999999997, 0.0036084099999999998, 0.0032902000000000001, 0.0031122300000000001, 0.0026434700000000002, 0.0022806300000000001])

if sys:
 # sys + stat
 masses = array('d', [1000.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0])
 xs_limits[0] = array('d', [4.2118200000000003, 1.6541300000000001, 0.55755999999999994, 0.34149800000000002, 0.22600600000000001, 0.201904, 0.20349400000000001, 0.167043, 0.12089999999999999, 0.095278500000000002, 0.100101, 0.14135400000000001, 0.122973, 0.090197700000000006, 0.068269499999999997, 0.066832699999999995, 0.063813099999999998, 0.052602400000000001, 0.033411499999999997, 0.022763499999999999, 0.015803600000000001, 0.011833, 0.0086662800000000002, 0.0070455600000000002, 0.0062736500000000004, 0.0059306599999999999, 0.00561737, 0.0052350599999999997, 0.0049350699999999997, 0.00461809, 0.0042270800000000002])
 xs_limits[1] = array('d', [1.28007, 1.1842699999999999, 0.367566, 0.192186, 0.119537, 0.10804, 0.114817, 0.13850999999999999, 0.098569799999999999, 0.075354599999999994, 0.081570000000000004, 0.091896099999999994, 0.077500299999999994, 0.060370100000000003, 0.052438199999999997, 0.054162200000000001, 0.050496100000000002, 0.040505100000000002, 0.026117100000000001, 0.018084599999999999, 0.013157500000000001, 0.0092849600000000001, 0.0073081800000000001, 0.0058640000000000003, 0.0052933700000000004, 0.0049809800000000003, 0.0046586700000000002, 0.0042748999999999999, 0.0039435299999999998, 0.0036223100000000001, 0.0034042199999999999])
 xs_limits[2] = array('d', [0.85548199999999996, 0.84534799999999999, 0.25226199999999999, 0.13573299999999999, 0.0892984, 0.081926499999999999, 0.089464699999999994, 0.114352, 0.086903300000000003, 0.063511999999999999, 0.0684612, 0.071167300000000003, 0.059080899999999999, 0.046943800000000001, 0.0432863, 0.045646199999999998, 0.042428500000000001, 0.033412499999999998, 0.0226027, 0.0152625, 0.011348799999999999, 0.0080809499999999999, 0.0064396100000000001, 0.0052540299999999998, 0.0047833399999999996, 0.0044926799999999998, 0.0041860600000000001, 0.0038170499999999998, 0.0034999499999999999, 0.0032717900000000001, 0.00293209])
 xs_limits[3] = array('d', [0.61651699999999998, 0.64604499999999998, 0.21223, 0.106056, 0.0684279, 0.063028699999999993, 0.069857000000000002, 0.093030399999999999, 0.073984900000000006, 0.055434499999999998, 0.058917700000000003, 0.056365800000000001, 0.046353699999999998, 0.037593399999999999, 0.036586, 0.038987599999999997, 0.036139200000000003, 0.029617399999999999, 0.018850599999999999, 0.013448099999999999, 0.0097049700000000003, 0.0070975300000000003, 0.0057316299999999997, 0.0046952699999999997, 0.0043628499999999997, 0.0040803899999999997, 0.0037947599999999999, 0.003447, 0.0032466299999999999, 0.0028686499999999999, 0.0025190299999999998])

##
########################################################

m_x = array('d', [500., 600.,  700., 800., 900., 1000., 1100., 1200., 1300., 1400., 1500., 1600., 1700., 1800., 1900., 2000., 2100., 2200., 2300., 2400., 2500., 2600., 2700., 2800., 2900., 3000., 3100., 3200., 3300., 3400., 3500., 3600., 3700., 3800., 3900., 4000., 4100., 4200., 4300., 4400., 4500.])
zprime = array('d', [0.2555E+02, 0.1211E+02, 0.6246E+01, 0.3427E+01, 0.1969E+01, 0.1172E+01, 0.7171E+00, 0.4486E+00, 0.2857E+00, 0.1845E+00, 0.1206E+00, 0.7961E-01, 0.5295E-01, 0.3545E-01, 0.2386E-01, 0.1611E-01, 0.1092E-01, 0.7413E-02, 0.5039E-02, 0.3426E-02, 0.2329E-02, 0.1580E-02, 0.1070E-02, 0.7231E-03, 0.4867E-03, 0.3261E-03, 0.2174E-03, 0.1440E-03, 0.9477E-04, 0.6190E-04, 0.4007E-04])
rsg = array('d', [0.4828E+02, 0.1862E+02, 0.8100E+01, 0.3852E+01, 0.1961E+01, 0.1053E+01, 0.5905E+00, 0.3426E+00, 0.2044E+00, 0.1248E+00, 0.7770E-01, 0.4911E-01, 0.3145E-01, 0.2036E-01, 0.1330E-01, 0.8743E-02, 0.5781E-02, 0.3840E-02, 0.2559E-02, 0.1708E-02, 0.1142E-02, 0.7635E-03, 0.5101E-03, 0.3402E-03, 0.2264E-03, 0.1501E-03, 0.9913E-04, 0.6512E-04, 0.4253E-04, 0.2759E-04, 0.1775E-04])

graphs = {}

for br in range(0,len(BR)):
  graphs[br] = TGraph(len(masses),masses,xs_limits[br])
  graphs[br].SetMarkerStyle(24+br)
  graphs[br].SetMarkerColor(kGreen+2)
  graphs[br].SetLineWidth(2)
  graphs[br].SetLineStyle(1+br)
  graphs[br].SetLineColor(kGreen+2)
  if br==0:
    graphs[br].GetXaxis().SetTitle("Resonance Mass [GeV]")
    graphs[br].GetYaxis().SetTitle("#sigma#timesBR(X#rightarrowjj)#timesA [pb]")
    graphs[br].GetYaxis().SetRangeUser(1e-03,20)
    graphs[br].GetXaxis().SetNdivisions(1005)

graph_zprime = TGraph(len(m_x),m_x,zprime)
graph_zprime.SetLineWidth(2)
graph_zprime.SetLineStyle(8)
graph_zprime.SetLineColor(32)

graph_rsg = TGraph(len(m_x),m_x,rsg)
graph_rsg.SetLineWidth(2)
graph_rsg.SetLineStyle(8)
graph_rsg.SetLineColor(46)

c = TCanvas("c", "",800,800)
c.cd()

for br in range(0,len(BR)):
  if br==0:
    graphs[br].Draw("ALP")
  else:
    graphs[br].Draw("LP")

graph_rsg.Draw("L")

legend = TLegend(.45,.60,.85,.80)
legend.SetBorderSize(0)
legend.SetFillColor(0)
legend.SetFillStyle(0)
legend.SetTextFont(42)
legend.SetTextSize(0.03)
if sys: legend.SetHeader("Obs. 95% CL Upper Limits")
else:   legend.SetHeader("Obs. 95% CL Upper Limits (stat. only)")
for br in range(0,len(BR)):
  legend.AddEntry(graphs[br], "f_{b#bar{b}} = " + str(BR[br]),"lp")
legend.Draw()

legend2 = TLegend(.45,.80,.85,.85)
legend2.SetBorderSize(0)
legend2.SetFillColor(0)
legend2.SetFillStyle(0)
legend2.SetTextFont(42)
legend2.SetTextSize(0.03)
legend2.AddEntry(graph_rsg,"RS Graviton (f_{b#bar{b}} #approx 0.1)","l")
legend2.Draw()

l1 = TLatex()
l1.SetTextAlign(12)
l1.SetTextFont(42)
l1.SetNDC()
l1.SetTextSize(0.035)
l1.DrawLatex(0.70,0.52, "f_{b#bar{b}} = #frac{BR(X#rightarrowb#bar{b})}{BR(X#rightarrowjj)}")
l1.SetTextSize(0.05)
l1.DrawLatex(0.18,0.89, "gg/bb")
l1.SetTextSize(0.04)
l1.DrawLatex(0.18,0.43, "CMS Preliminary")
l1.DrawLatex(0.18,0.35, "#intLdt = 5 fb^{-1}")
l1.DrawLatex(0.19,0.30, "#sqrt{s} = 7 TeV")
l1.DrawLatex(0.18,0.25, "|#eta| < 2.5, |#Delta#eta| < 1.3")
l1.DrawLatex(0.18,0.20, "Wide Jets")
l1.SetTextSize(0.055)
l1.DrawLatex(0.54,0.89, "0, 1 and 2 b-tags")

c.SetLogy()
if sys: c.SaveAs('CSVL_Combined_limit_obs_SplusB_sys_WideJets_RSG.eps')
else:   c.SaveAs('CSVL_Combined_limit_obs_SplusB_WideJets_RSG.eps')

