#!/usr/bin/env python

import sys, os, subprocess, string, re
from ROOT import *
from array import array
import CMS_lumi


gROOT.SetBatch(kTRUE);
gStyle.SetOptStat(0)
gStyle.SetOptTitle(0)
gStyle.SetTitleFont(42, "XYZ")
gStyle.SetTitleSize(0.06, "XYZ")
gStyle.SetLabelFont(42, "XYZ")
gStyle.SetLabelSize(0.05, "XYZ")
gStyle.SetCanvasBorderMode(0)
gStyle.SetFrameBorderMode(0)
gStyle.SetCanvasColor(kWhite)
gStyle.SetPadTickX(1)
gStyle.SetPadTickY(1)
gStyle.SetPadLeftMargin(0.15)
gStyle.SetPadRightMargin(0.05)
gStyle.SetPadTopMargin(0.06)
gStyle.SetPadBottomMargin(0.14)
gROOT.ForceStyle()

masses = array('d')
xs_obs_limits = array('d')
xs_exp_limits = array('d')
masses_exp = array('d')
xs_exp_limits_1sigma = array('d')
xs_exp_limits_1sigma_up = array('d')
xs_exp_limits_2sigma = array('d')
xs_exp_limits_2sigma_up = array('d')


syst = True
syst = False

mass_min = 1500
mass_max = 7000

########################################################
## Uncomment this part if running the limit code


### for running the limit code
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #cmd = "./stats " + str(int(mass)) + " qq | tee stats_" + str(int(mass)) + "_qq.log"
  #print "Running: " + cmd
  #proc = subprocess.Popen( cmd, shell=True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT )
  #output = proc.communicate()[0]
  #if proc.returncode != 0:
    #print output
    #sys.exit(1)
  ##print output

  #outputlines = output.split("\n")

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

### for reading the limit code log files
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #log_file = open("stats_" + str(int(mass)) + "_qq.log",'r')
  #outputlines = log_file.readlines()
  #log_file.close()

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

#for i in range(0,len(masses)):
  #masses_exp.append( masses[len(masses)-i-1] )
  #xs_exp_limits_1sigma.append( xs_exp_limits_1sigma_up[len(masses)-i-1] )
  #xs_exp_limits_2sigma.append( xs_exp_limits_2sigma_up[len(masses)-i-1] )


#print "masses =", masses
#print "xs_obs_limits =", xs_obs_limits
#print "xs_exp_limits =", xs_exp_limits
#print ""
#print "masses_exp =", masses_exp
#print "xs_exp_limits_1sigma =", xs_exp_limits_1sigma
#print "xs_exp_limits_2sigma =", xs_exp_limits_2sigma

##
########################################################

########################################################
## Comment out this part if running the limit code

masses = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0])
xs_obs_limits = array('d', [0.775061, 1.16284, 1.90768, 1.48704, 0.855372, 0.401804, 0.291316, 0.219498, 0.220803, 0.295796, 0.2061, 0.10702, 0.0731531, 0.0683263, 0.0679333, 0.0714333, 0.073882, 0.0741829, 0.0857849, 0.114538, 0.139517, 0.148079, 0.152966, 0.16331, 0.170325, 0.16371, 0.144924, 0.116293, 0.0811471, 0.0493801, 0.0287902, 0.0188957, 0.0163171, 0.0141467, 0.0128185, 0.0120728, 0.0114428, 0.0108551, 0.0103636, 0.0102784, 0.010643, 0.0107971, 0.0116917, 0.0120182, 0.0120065, 0.0116549, 0.0112447, 0.0106165, 0.00989647, 0.0096106, 0.00923742, 0.00897159, 0.00881246, 0.00867272, 0.00857673, 0.00850635])
xs_exp_limits = array('d', [1.15155, 0.876233, 0.805067, 0.629503, 0.532246, 0.485293, 0.388958, 0.351702, 0.296746, 0.266479, 0.22319, 0.199353, 0.18919, 0.159505, 0.147979, 0.12703, 0.113777, 0.103096, 0.0955222, 0.085054, 0.0724143, 0.0640054, 0.0571713, 0.0505803, 0.0459522, 0.0422577, 0.0374626, 0.0359435, 0.0333498, 0.0316107, 0.0293076, 0.0283795, 0.0257557, 0.0237794, 0.0221201, 0.0200663, 0.0188833, 0.0176395, 0.016875, 0.0158648, 0.0150875, 0.0141745, 0.0133589, 0.0125921, 0.0118766, 0.0114729, 0.0111033, 0.0107581, 0.0109314, 0.0103065, 0.0100075, 0.00973355, 0.00967439, 0.00957143, 0.00945452, 0.00938091])

masses_exp = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0, 7000.0, 6900.0, 6800.0, 6700.0, 6600.0, 6500.0, 6400.0, 6300.0, 6200.0, 6100.0, 6000.0, 5900.0, 5800.0, 5700.0, 5600.0, 5500.0, 5400.0, 5300.0, 5200.0, 5100.0, 5000.0, 4900.0, 4800.0, 4700.0, 4600.0, 4500.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0])
xs_exp_limits_1sigma = array('d', [0.616094, 0.52935, 0.469752, 0.393659, 0.34913, 0.298131, 0.25353, 0.227451, 0.196538, 0.180733, 0.155773, 0.13215, 0.121451, 0.108839, 0.10335, 0.08933, 0.0762125, 0.0702414, 0.064028, 0.0550377, 0.0520562, 0.0450578, 0.0412935, 0.0342731, 0.0312725, 0.0291683, 0.0266507, 0.0259537, 0.0236737, 0.0233719, 0.0213856, 0.0206024, 0.0185611, 0.0170713, 0.0157854, 0.0149805, 0.014208, 0.0136793, 0.0128121, 0.0120191, 0.0115, 0.0107996, 0.00998244, 0.00947223, 0.0090741, 0.00885266, 0.00862866, 0.00836194, 0.00844899, 0.0081857, 0.00811219, 0.00807255, 0.00803543, 0.00802666, 0.00801787, 0.00802072, 0.0125419, 0.0126995, 0.0131296, 0.0133423, 0.0135129, 0.0141112, 0.014501, 0.014268, 0.0147496, 0.0150155, 0.0155586, 0.0164615, 0.0171585, 0.018959, 0.0205609, 0.021206, 0.0228916, 0.0246597, 0.026632, 0.0286143, 0.029947, 0.0321788, 0.0339202, 0.0368816, 0.0420673, 0.04459, 0.0469032, 0.0507767, 0.0534108, 0.0543656, 0.0634439, 0.0721621, 0.0796648, 0.0957716, 0.0959228, 0.10991, 0.126051, 0.137221, 0.152062, 0.167277, 0.192475, 0.216155, 0.246083, 0.294445, 0.323562, 0.359454, 0.41488, 0.47381, 0.536258, 0.608493, 0.729552, 0.853522, 0.985084, 1.22688, 1.65568, 2.25048])
xs_exp_limits_2sigma = array('d', [0.425474, 0.338941, 0.329484, 0.253911, 0.232286, 0.206498, 0.16285, 0.160299, 0.12205, 0.114384, 0.112802, 0.0929634, 0.0868061, 0.0714123, 0.069116, 0.0654416, 0.0567837, 0.0530081, 0.0478222, 0.0422279, 0.0337803, 0.0339256, 0.030281, 0.0272774, 0.0248585, 0.0237846, 0.0222316, 0.0194941, 0.0176438, 0.0178562, 0.0168419, 0.0158582, 0.0150986, 0.0145579, 0.0135138, 0.0127251, 0.0116641, 0.0106891, 0.0101149, 0.00967495, 0.00916239, 0.00873649, 0.00823462, 0.00800657, 0.0077664, 0.00754629, 0.00765805, 0.00762237, 0.00758391, 0.00754002, 0.007542, 0.00755093, 0.00757256, 0.00759704, 0.00762279, 0.00765845, 0.0163873, 0.0164606, 0.0166675, 0.01795, 0.0185195, 0.0183652, 0.0188426, 0.019807, 0.0204426, 0.0207099, 0.0228791, 0.0234063, 0.0236944, 0.0259394, 0.0280456, 0.0304052, 0.0336809, 0.0356726, 0.0377873, 0.0401652, 0.0425883, 0.0484307, 0.0496967, 0.0532619, 0.0605465, 0.0618074, 0.0681022, 0.0696959, 0.0746672, 0.0775866, 0.0903605, 0.0981863, 0.117599, 0.14002, 0.135245, 0.155833, 0.182488, 0.198542, 0.214188, 0.233398, 0.256728, 0.310543, 0.350203, 0.422817, 0.453052, 0.521432, 0.603043, 0.667993, 0.727911, 0.924679, 1.08316, 1.3501, 1.49583, 1.76896, 2.49789, 3.37967])

if syst:
  masses = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0])
  xs_obs_limits = array('d', [9.2145, 6.91205, 3.59898, 1.66443, 0.994762, 1.01517, 1.32504, 1.41151, 1.35899, 1.35954, 1.38068, 1.31123, 1.08647, 0.752455, 0.560417, 0.601718, 0.648559, 0.634623, 0.547292, 0.446601, 0.349089, 0.290888, 0.241313, 0.192199, 0.154875, 0.125193, 0.118726, 0.108347, 0.104953, 0.102496, 0.0978532, 0.0943767, 0.0973504, 0.0998841, 0.105425, 0.105793, 0.105978, 0.104013, 0.103198, 0.0990549, 0.0956666, 0.0911268, 0.0855285, 0.0817995, 0.0765413, 0.0733673, 0.0727553, 0.0714237, 0.0703047, 0.0696831, 0.0688, 0.0689254, 0.0682202, 0.0680882, 0.068512, 0.0686543])
  xs_exp_limits = array('d', [5.19075, 3.96418, 3.34343, 2.863645, 2.491375, 2.10389, 1.68206, 1.462285, 1.24104, 1.08231, 0.9402235, 0.8049225, 0.725906, 0.6264525, 0.5672445, 0.503862, 0.4276885, 0.3768365, 0.355516, 0.313671, 0.291721, 0.2633065, 0.2419025, 0.2219035, 0.2002785, 0.1895905, 0.175589, 0.1683045, 0.1502285, 0.139875, 0.129911, 0.1233565, 0.116778, 0.107678, 0.1000142, 0.09584945, 0.0896301, 0.08582945, 0.08361435, 0.0813843, 0.0774643, 0.07480645, 0.07320105, 0.0689344, 0.0661377, 0.0674293, 0.063676, 0.06303385, 0.0628788, 0.0629994, 0.06288265, 0.06294995, 0.06300835, 0.0631378, 0.063439, 0.06354165])

  masses_exp = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0, 7000.0, 6900.0, 6800.0, 6700.0, 6600.0, 6500.0, 6400.0, 6300.0, 6200.0, 6100.0, 6000.0, 5900.0, 5800.0, 5700.0, 5600.0, 5500.0, 5400.0, 5300.0, 5200.0, 5100.0, 5000.0, 4900.0, 4800.0, 4700.0, 4600.0, 4500.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0])
  xs_exp_limits_1sigma = array('d', [3.50285793, 2.67914772, 2.29220194, 2.00013517, 1.72924766, 1.45522219, 1.21121511, 1.04589851, 0.896084394, 0.791871819, 0.667730375, 0.582969195, 0.509569598, 0.456812634, 0.405742643, 0.354259696, 0.295176828, 0.262777834, 0.248635661, 0.221912429, 0.209933125, 0.186606528, 0.1698142, 0.158595618, 0.148310366, 0.135228659, 0.123537814, 0.114792681, 0.109026016, 0.102066408, 0.0968169796, 0.092977056, 0.0850804548, 0.0804619121, 0.0753214097, 0.0702469197, 0.0681432127, 0.0647002933, 0.0622637887, 0.0608064446, 0.0597798407, 0.0584895299, 0.0577254922, 0.0567694337, 0.0558649715, 0.056030339, 0.0553738832, 0.0554459615, 0.055761605, 0.0558778182, 0.0561897263, 0.0563950404, 0.0567142686, 0.0571065464, 0.0573075919, 0.0576043814, 0.0790708591, 0.0795559214, 0.07942625, 0.0802813868, 0.0812885448, 0.082124842, 0.0838870202, 0.084959628, 0.085763971, 0.0852717032, 0.0914717662, 0.0911787927, 0.0913466654, 0.095258766, 0.0994733683, 0.106510024, 0.106915866, 0.112440787, 0.118858355, 0.12404565, 0.138285703, 0.141630826, 0.153219525, 0.165989314, 0.175746507, 0.19125434, 0.194431922, 0.212185906, 0.226293059, 0.246982123, 0.274221577, 0.292084585, 0.312997827, 0.348989063, 0.376448148, 0.420082911, 0.446801462, 0.489101274, 0.544520971, 0.631290653, 0.722636647, 0.832285462, 0.931647898, 1.05620222, 1.14555611, 1.39206701, 1.57442385, 1.79455482, 2.07722031, 2.39366038, 2.99236087, 3.37151805, 4.19337985, 5.13615755, 5.99522604, 7.62307273])
  xs_exp_limits_2sigma = array('d', [2.49798318, 1.8307633, 1.74087421, 1.59834037, 1.20866529, 1.04538072, 0.884710773, 0.76902413, 0.65775513, 0.587386465, 0.503901182, 0.402785469, 0.389492044, 0.317836782, 0.281874486, 0.272195035, 0.239455845, 0.199294578, 0.199205236, 0.178711367, 0.160857102, 0.144405309, 0.132904907, 0.123539638, 0.110878951, 0.104745826, 0.0951378676, 0.0850101811, 0.0841478235, 0.0789131608, 0.0768508682, 0.0718021527, 0.070152537, 0.0648983956, 0.0604887131, 0.0602804386, 0.0570207861, 0.0566626276, 0.0556185248, 0.0552350722, 0.0543842037, 0.0539256449, 0.0535440514, 0.0528320514, 0.0526737927, 0.052382699, 0.0523285684, 0.0525500285, 0.0531578538, 0.053341214, 0.0535602459, 0.0538997829, 0.0542506345, 0.0545749026, 0.0549817908, 0.0551105267, 0.10699603, 0.107692638, 0.108091467, 0.109881565, 0.110415214, 0.112214011, 0.111929814, 0.112856024, 0.115840079, 0.117339818, 0.131195568, 0.128557738, 0.124011902, 0.126124994, 0.138368673, 0.146318873, 0.150993844, 0.156239841, 0.164313279, 0.174994928, 0.189440346, 0.191453231, 0.217236569, 0.223448947, 0.248905312, 0.268250518, 0.257681546, 0.284258225, 0.316541539, 0.345664877, 0.384365113, 0.396023646, 0.406345878, 0.487646587, 0.498405711, 0.572819981, 0.636305141, 0.675386924, 0.770642259, 0.853594827, 0.972765889, 1.12407551, 1.23651738, 1.47451812, 1.60522248, 1.91397721, 2.15401693, 2.43639716, 2.74043596, 3.44637899, 4.19088033, 4.72822479, 6.02284961, 7.46564795, 8.87391198, 11.2440769])

##
########################################################

massesTh = array('d', [1000.0,1100.0,1200.0,1300.0,1400.0,1500.0,1600.0,1700.0,1800.0,1900.0,2000.0,2100.0,2200.0,2300.0,2400.0,2500.0,2600.0,2700.0,2800.0,2900.0,3000.0,3100.0,3200.0,3300.0,3400.0,3500.0,3600.0,3700.0,3800.0,3900.0,4000.0,4100.0,4200.0,4300.0,4400.0,4500.0,4600.0,4700.0,4800.0,4900.0,5000.0,5100.0,5200.0,5300.0,5400.0,5500.0,5600.0,5700.0,5800.0,5900.0,6000.0,6100.0,6200.0,6300.0,6400.0,6500.0,6600.0,6700.0,6800.0,6900.0,7000.0,7100.0,7200.0,7300.0,7400.0,7500.0,7600.0,7700.0,7800.0,7900.0,8000.0,8100.0,8200.0,8300.0,8400.0,8500.0,8600.0,8700.0,8800.0,8900.0,9000.0])

xsAxi = array('d', [0.1849E+03,0.1236E+03,0.8473E+02,0.5937E+02,0.4235E+02,0.3069E+02,0.2257E+02,0.1680E+02,0.1263E+02,0.9577E+01,0.7317E+01,0.5641E+01,0.4374E+01,0.3411E+01,0.2672E+01,0.2103E+01,0.1658E+01,0.1312E+01,0.1041E+01,0.8284E+00,0.6610E+00,0.5294E+00,0.4250E+00,0.3417E+00,0.2752E+00,0.2220E+00,0.1792E+00,0.1449E+00,0.1172E+00,0.9487E-01,0.7686E-01,0.6219E-01,0.5033E-01,0.4074E-01,0.3298E-01,0.2671E-01,0.2165E-01,0.1755E-01,0.1422E-01,0.1152E-01,0.9322E-02,0.7539E-02,0.6092E-02,0.4917E-02,0.3965E-02,0.3193E-02,0.2568E-02,0.2062E-02,0.1653E-02,0.1323E-02,0.1057E-02,0.8442E-03,0.6728E-03,0.5349E-03,0.4242E-03,0.3357E-03,0.2644E-03,0.2077E-03,0.1627E-03,0.1271E-03,0.9891E-04,0.7686E-04,0.5951E-04,0.4592E-04,0.3530E-04,0.2704E-04,0.2059E-04,0.1562E-04,0.1180E-04,0.8882E-05,0.6657E-05,0.4968E-05,0.3693E-05,0.2734E-05,0.2016E-05,0.1481E-05,0.1084E-05,0.7903E-06,0.5744E-06,0.4160E-06,0.3007E-06])
xsDiquark = array('d', [0.5824E+02,0.4250E+02,0.3172E+02,0.2411E+02,0.1862E+02,0.1457E+02,0.1153E+02,0.9211E+01,0.7419E+01,0.6019E+01,0.4912E+01,0.4031E+01,0.3323E+01,0.2750E+01,0.2284E+01,0.1903E+01,0.1590E+01,0.1331E+01,0.1117E+01,0.9386E+00,0.7900E+00,0.6658E+00,0.5618E+00,0.4745E+00,0.4010E+00,0.3391E+00,0.2869E+00,0.2428E+00,0.2055E+00,0.1740E+00,0.1473E+00,0.1246E+00,0.1055E+00,0.8922E-01,0.7544E-01,0.6376E-01,0.5385E-01,0.4546E-01,0.3834E-01,0.3231E-01,0.2720E-01,0.2288E-01,0.1922E-01,0.1613E-01,0.1352E-01,0.1132E-01,0.9463E-02,0.7900E-02,0.6584E-02,0.5479E-02,0.4551E-02,0.3774E-02,0.3124E-02,0.2581E-02,0.2128E-02,0.1750E-02,0.1437E-02,0.1177E-02,0.9612E-03,0.7833E-03,0.6366E-03,0.5160E-03,0.4170E-03,0.3360E-03,0.2700E-03,0.2162E-03,0.1725E-03,0.1372E-03,0.1087E-03,0.8577E-04,0.6742E-04,0.5278E-04,0.4114E-04,0.3192E-04,0.2465E-04,0.1894E-04,0.1448E-04,0.1101E-04,0.8322E-05,0.6253E-05,0.4670E-05])
xsWprime = array('d', [0.8811E+01,0.6024E+01,0.4216E+01,0.3010E+01,0.2185E+01,0.1610E+01,0.1200E+01,0.9043E+00,0.6875E+00,0.5271E+00,0.4067E+00,0.3158E+00,0.2464E+00,0.1932E+00,0.1521E+00,0.1201E+00,0.9512E-01,0.7554E-01,0.6012E-01,0.4792E-01,0.3827E-01,0.3059E-01,0.2448E-01,0.1960E-01,0.1571E-01,0.1259E-01,0.1009E-01,0.8090E-02,0.6483E-02,0.5193E-02,0.4158E-02,0.3327E-02,0.2660E-02,0.2125E-02,0.1695E-02,0.1351E-02,0.1075E-02,0.8546E-03,0.6781E-03,0.5372E-03,0.4248E-03,0.3353E-03,0.2642E-03,0.2077E-03,0.1629E-03,0.1275E-03,0.9957E-04,0.7757E-04,0.6027E-04,0.4670E-04,0.3610E-04,0.2783E-04,0.2140E-04,0.1641E-04,0.1254E-04,0.9561E-05,0.7269E-05,0.5510E-05,0.4167E-05,0.3143E-05,0.2364E-05,0.1774E-05,0.1329E-05,0.9931E-06,0.7411E-06,0.5523E-06,0.4108E-06,0.3055E-06,0.2271E-06,0.1687E-06,0.1254E-06,0.9327E-07,0.6945E-07,0.5177E-07,0.3863E-07,0.2888E-07,0.2162E-07,0.1622E-07,0.1218E-07,0.9156E-08,0.6893E-08])
xsZprime = array('d', [0.5027E+01,0.3398E+01,0.2353E+01,0.1663E+01,0.1196E+01,0.8729E+00,0.6450E+00,0.4822E+00,0.3638E+00,0.2769E+00,0.2123E+00,0.1639E+00,0.1272E+00,0.9933E-01,0.7789E-01,0.6134E-01,0.4848E-01,0.3845E-01,0.3059E-01,0.2440E-01,0.1952E-01,0.1564E-01,0.1256E-01,0.1010E-01,0.8142E-02,0.6570E-02,0.5307E-02,0.4292E-02,0.3473E-02,0.2813E-02,0.2280E-02,0.1848E-02,0.1499E-02,0.1216E-02,0.9864E-03,0.8002E-03,0.6490E-03,0.5262E-03,0.4264E-03,0.3453E-03,0.2795E-03,0.2260E-03,0.1826E-03,0.1474E-03,0.1188E-03,0.9566E-04,0.7690E-04,0.6173E-04,0.4947E-04,0.3957E-04,0.3159E-04,0.2516E-04,0.2001E-04,0.1587E-04,0.1255E-04,0.9906E-05,0.7795E-05,0.6116E-05,0.4785E-05,0.3731E-05,0.2900E-05,0.2247E-05,0.1734E-05,0.1334E-05,0.1022E-05,0.7804E-06,0.5932E-06,0.4492E-06,0.3388E-06,0.2544E-06,0.1903E-06,0.1417E-06,0.1051E-06,0.7764E-07,0.5711E-07,0.4186E-07,0.3055E-07,0.2223E-07,0.1612E-07,0.1164E-07,0.8394E-08])

xs_max = 2.8e+01
idx = 0

for i, xs in enumerate(xsAxi):
  if xs < xs_max:
    idx = i
    break

graph_xsAxi = TGraph(len(massesTh[idx:-1]),massesTh[idx:-1],xsAxi[idx:-1])
graph_xsAxi.SetLineWidth(3)
graph_xsAxi.SetLineStyle(3)
graph_xsAxi.SetLineColor(63)

for i, xs in enumerate(xsDiquark):
  if xs < xs_max:
    idx = i
    break

graph_xsDiquark = TGraph(len(massesTh[idx:-1]),massesTh[idx:-1],xsDiquark[idx:-1])
graph_xsDiquark.SetLineWidth(3)
graph_xsDiquark.SetLineStyle(9)
graph_xsDiquark.SetLineColor(42)

graph_xsWprime = TGraph(len(massesTh),massesTh,xsWprime)
graph_xsWprime.SetLineWidth(3)
graph_xsWprime.SetLineStyle(7)
graph_xsWprime.SetLineColor(46)

graph_xsZprime = TGraph(len(massesTh),massesTh,xsZprime)
graph_xsZprime.SetLineWidth(3)
graph_xsZprime.SetLineStyle(5)
graph_xsZprime.SetLineColor(38)

graph_exp_2sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_2sigma)
graph_exp_2sigma.SetFillColor(kYellow)
graph_exp_2sigma.GetXaxis().SetTitle("qq resonance mass [GeV]")
graph_exp_2sigma.GetYaxis().SetTitle("#sigma #times #it{B} #times #it{A} [pb]")
graph_exp_2sigma.GetYaxis().SetTitleOffset(1.1)
graph_exp_2sigma.GetYaxis().SetRangeUser(5e-03,1e+02)
#graph_exp_2sigma.GetXaxis().SetNdivisions(1005)

graph_exp_1sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_1sigma)
graph_exp_1sigma.SetFillColor(kGreen+1)

graph_exp = TGraph(len(masses),masses,xs_exp_limits)
#graph_exp.SetMarkerStyle(24)
graph_exp.SetLineWidth(3)
graph_exp.SetLineStyle(2)
graph_exp.SetLineColor(4)

graph_obs = TGraph(len(masses),masses,xs_obs_limits)
graph_obs.SetMarkerStyle(20)
graph_obs.SetLineWidth(3)
#graph_obs.SetLineStyle(1)
graph_obs.SetLineColor(1)


c = TCanvas("c", "",800,800)
c.cd()

graph_exp_2sigma.Draw("AF")
graph_exp_1sigma.Draw("F")
graph_exp.Draw("L")
graph_obs.Draw("LP")
graph_xsAxi.Draw("L")
graph_xsDiquark.Draw("L")
graph_xsWprime.Draw("L")
graph_xsZprime.Draw("L")

legend = TLegend(.55,.50,.90,.70)
legend.SetBorderSize(0)
legend.SetFillColor(0)
legend.SetFillStyle(0)
legend.SetTextFont(42)
legend.SetTextSize(0.035)
legend.SetHeader('95% CL upper limits')
legend.AddEntry(graph_obs,"Observed","lp")
legend.AddEntry(graph_exp,"Expected","lp")
legend.AddEntry(graph_exp_1sigma,"#pm 1#sigma","F")
legend.AddEntry(graph_exp_2sigma,"#pm 2#sigma","F")
legend.Draw()

legendTh = TLegend(.55,.72,.90,.88)
legendTh.SetBorderSize(0)
legendTh.SetFillColor(0)
legendTh.SetFillStyle(0)
legendTh.SetTextFont(42)
legendTh.SetTextSize(0.035)
legendTh.AddEntry(graph_xsAxi,"Axigluon/coloron","l")
legendTh.AddEntry(graph_xsDiquark,"Scalar diquark","l")
legendTh.AddEntry(graph_xsWprime,"W'","l")
legendTh.AddEntry(graph_xsZprime,"Z'","l")
legendTh.Draw()

#l1 = TLatex()
#l1.SetTextAlign(12)
#l1.SetTextFont(42)
#l1.SetNDC()
#l1.SetTextSize(0.04)
#l1.SetTextSize(0.04)
#l1.DrawLatex(0.18,0.40, "CMS Preliminary")
#l1.DrawLatex(0.18,0.32, "#intLdt = 1 fb^{-1}")
#l1.DrawLatex(0.19,0.27, "#sqrt{s} = 13 TeV")

#draw the lumi text on the canvas
CMS_lumi.extraText = "Preliminary"
CMS_lumi.lumi_sqrtS = "547 pb^{-1} (13 TeV)" # used with iPeriod = 0, e.g. for simulation-only plots (default is an empty string)
iPos = 11
if( iPos==0 ): CMS_lumi.relPosX = 0.15
iPeriod = 0

CMS_lumi.CMS_lumi(c, iPeriod, iPos)

gPad.RedrawAxis()

c.SetLogy()
c.SaveAs('xs_limit_DijetLimitCode_qq' + ('_NoSyst' if not syst else '') + '_Run2_13TeV_DATA_547_invpb.eps')
