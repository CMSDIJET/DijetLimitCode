#!/usr/bin/env python

import sys, os, subprocess, string, re
from ROOT import *
from array import array
import CMS_lumi


gROOT.SetBatch(kTRUE);
gStyle.SetOptStat(0)
gStyle.SetOptTitle(0)
gStyle.SetTitleFont(42, "XYZ")
gStyle.SetTitleSize(0.06, "XYZ")
gStyle.SetLabelFont(42, "XYZ")
gStyle.SetLabelSize(0.05, "XYZ")
gStyle.SetCanvasBorderMode(0)
gStyle.SetFrameBorderMode(0)
gStyle.SetCanvasColor(kWhite)
gStyle.SetPadTickX(1)
gStyle.SetPadTickY(1)
gStyle.SetPadLeftMargin(0.15)
gStyle.SetPadRightMargin(0.05)
gStyle.SetPadTopMargin(0.05)
gStyle.SetPadBottomMargin(0.15)
gROOT.ForceStyle()

masses = array('d')
xs_obs_limits = array('d')
xs_exp_limits = array('d')
masses_exp = array('d')
xs_exp_limits_1sigma = array('d')
xs_exp_limits_1sigma_up = array('d')
xs_exp_limits_2sigma = array('d')
xs_exp_limits_2sigma_up = array('d')


syst = True
#syst = False

mass_min = 1300
mass_max = 5500

########################################################
## Uncomment this part if running the limit code


### for running the limit code
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #cmd = "./stats " + str(int(mass)) + " qq | tee stats_" + str(int(mass)) + "_qq.log"
  #print "Running: " + cmd
  #proc = subprocess.Popen( cmd, shell=True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT )
  #output = proc.communicate()[0]
  #if proc.returncode != 0:
    #print output
    #sys.exit(1)
  ##print output

  #outputlines = output.split("\n")

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

### for reading the limit code log files
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #log_file = open("stats_" + str(int(mass)) + "_qq.log",'r')
  #outputlines = log_file.readlines()
  #log_file.close()

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

#for i in range(0,len(masses)):
  #masses_exp.append( masses[len(masses)-i-1] )
  #xs_exp_limits_1sigma.append( xs_exp_limits_1sigma_up[len(masses)-i-1] )
  #xs_exp_limits_2sigma.append( xs_exp_limits_2sigma_up[len(masses)-i-1] )


#print "masses =", masses
#print "xs_obs_limits =", xs_obs_limits
#print "xs_exp_limits =", xs_exp_limits
#print ""
#print "masses_exp =", masses_exp
#print "xs_exp_limits_1sigma =", xs_exp_limits_1sigma
#print "xs_exp_limits_2sigma =", xs_exp_limits_2sigma

##
########################################################

########################################################
## Comment out this part if running the limit code

masses = array('d', [1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0])
xs_obs_limits = array('d', [6.14541, 12.0413, 7.33195, 4.20454, 2.44237, 1.0547, 0.932299, 1.13839, 0.944321, 0.776942, 0.72678, 0.823009, 0.961684, 0.892532, 0.758619, 0.794199, 0.864349, 0.843993, 0.71905, 0.548449, 0.399232, 0.295972, 0.230841, 0.218183, 0.206602, 0.194428, 0.187785, 0.180948, 0.170974, 0.157708, 0.143806, 0.13309, 0.13876, 0.150656, 0.155266, 0.155995, 0.154529, 0.152059, 0.148293, 0.143637, 0.138653, 0.133751, 0.129186])
xs_exp_limits = array('d', [5.953165, 4.552015, 3.795275, 3.220215, 2.67389, 2.173825, 1.784165, 1.581795, 1.38295, 1.11076, 1.01397, 0.874278, 0.7755705, 0.694714, 0.5912225, 0.5470175, 0.4658715, 0.410058, 0.375248, 0.3631805, 0.33922, 0.3213355, 0.299411, 0.2729085, 0.244856, 0.22199, 0.2119765, 0.191125, 0.182655, 0.173839, 0.167976, 0.163957, 0.151922, 0.1357145, 0.1293065, 0.1219405, 0.120572, 0.1166585, 0.110724, 0.110056, 0.1066935, 0.1049505, 0.105543])

masses_exp = array('d', [1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5500.0, 5400.0, 5300.0, 5200.0, 5100.0, 5000.0, 4900.0, 4800.0, 4700.0, 4600.0, 4500.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0])
xs_exp_limits_1sigma = array('d', [3.27767556, 2.7426853, 2.22374212, 1.9156566, 1.70838841, 1.45524046, 1.20553094, 1.04453466, 0.874412475, 0.808807921, 0.72559636, 0.59700507, 0.533105846, 0.454297734, 0.431316658, 0.386528804, 0.332345933, 0.300801745, 0.272617201, 0.255148367, 0.236992392, 0.225223591, 0.219230952, 0.194796872, 0.179558776, 0.162630565, 0.162421388, 0.146299294, 0.139242523, 0.132581474, 0.128943699, 0.125480367, 0.12157223, 0.107140907, 0.104610387, 0.101678609, 0.099924605, 0.0981131211, 0.096466724, 0.0963001528, 0.0957211901, 0.0941533862, 0.0940726094, 0.132152689, 0.130000647, 0.137894801, 0.141787342, 0.147634621, 0.152214904, 0.159085453, 0.165081372, 0.177720041, 0.191062256, 0.2158828, 0.228055191, 0.233158744, 0.240087744, 0.248685913, 0.265586892, 0.287205683, 0.31978039, 0.358946213, 0.389039969, 0.410678949, 0.457148858, 0.484821744, 0.531095714, 0.537370695, 0.593165173, 0.686045415, 0.83207691, 0.908872971, 1.03242666, 1.12663906, 1.3320413, 1.60430105, 1.69477048, 1.97637132, 2.32719808, 2.77388254, 3.38798426, 4.08209893, 4.9538939, 6.40862157, 7.420209, 10.10465976])
xs_exp_limits_2sigma = array('d', [2.02323561, 1.78510814, 1.49481769, 1.3442773, 1.06106247, 0.957785627, 0.853135854, 0.710987377, 0.62974261, 0.568888226, 0.518732141, 0.448249199, 0.382678255, 0.338713703, 0.309668036, 0.276803415, 0.25695351, 0.241746514, 0.224753335, 0.219759319, 0.202001844, 0.18506572, 0.171238914, 0.157384634, 0.146700567, 0.135420593, 0.12976586, 0.118674313, 0.114877526, 0.116105889, 0.113389447, 0.10547977, 0.105714173, 0.09928673, 0.0972252821, 0.0959803805, 0.0946404603, 0.093688992, 0.0925379891, 0.0922936854, 0.0918050606, 0.0908886825, 0.0911301868, 0.181260106, 0.178481704, 0.184843837, 0.198196743, 0.208455217, 0.205512383, 0.216702232, 0.23247883, 0.232468301, 0.245457042, 0.287191875, 0.298443815, 0.307686157, 0.322902221, 0.362133677, 0.377258405, 0.410390354, 0.442709108, 0.499769805, 0.527021602, 0.585353305, 0.655860408, 0.65332147, 0.68517455, 0.718479535, 0.866237652, 0.978847271, 1.1494244, 1.31403943, 1.43313227, 1.59172297, 1.91146018, 2.47270199, 2.49080192, 2.72043157, 3.22778169, 4.19494124, 5.16247178, 5.97479964, 7.29470715, 9.8289851, 11.8506384, 14.9876499])

if syst:
  masses = array('d', [1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0])
  xs_obs_limits = array('d', [6.96126, 12.3942, 9.35617, 5.82312, 3.10265, 1.3848, 1.05297, 1.09517, 0.992305, 0.843134, 0.785291, 0.850175, 0.936222, 0.904873, 0.836914, 0.841205, 0.870425, 0.873373, 0.80947, 0.712017, 0.595224, 0.467353, 0.35399, 0.292541, 0.239473, 0.204999, 0.193611, 0.182793, 0.173186, 0.164162, 0.152964, 0.14202, 0.145083, 0.152375, 0.154081, 0.155061, 0.153338, 0.152231, 0.149152, 0.14777, 0.143774, 0.141109, 0.13627])
  xs_exp_limits = array('d', [6.25767, 5.02999, 4.20956, 3.51369, 2.91663, 2.47278, 2.066905, 1.84848, 1.55125, 1.31297, 1.21972, 1.06855, 0.872865, 0.778814, 0.7016955, 0.603842, 0.5585815, 0.487764, 0.448227, 0.402351, 0.380008, 0.3577995, 0.340498, 0.291046, 0.272989, 0.25501, 0.2345535, 0.211099, 0.197889, 0.1922855, 0.189964, 0.1759435, 0.167384, 0.147521, 0.139769, 0.1332855, 0.124678, 0.118241, 0.115284, 0.1109995, 0.1085595, 0.105954, 0.1034355])

  masses_exp = array('d', [1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5500.0, 5400.0, 5300.0, 5200.0, 5100.0, 5000.0, 4900.0, 4800.0, 4700.0, 4600.0, 4500.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0])
  xs_exp_limits_1sigma = array('d', [3.97258755, 3.08344266, 2.53035815, 2.21117126, 1.89733634, 1.7192491, 1.45246802, 1.2454814, 1.04590706, 0.919368571, 0.854455292, 0.705190072, 0.62466844, 0.54224842, 0.490186542, 0.442851732, 0.391595065, 0.36757946, 0.328362314, 0.3070493, 0.279122744, 0.261589257, 0.241950144, 0.222801348, 0.200078955, 0.186243766, 0.176779253, 0.161623922, 0.153105656, 0.144390834, 0.143941862, 0.134134766, 0.126537032, 0.110695476, 0.107880888, 0.102454044, 0.100602868, 0.0987952023, 0.0964013536, 0.0950055239, 0.0946020032, 0.0931198828, 0.0921986357, 0.135044246, 0.140499949, 0.146523214, 0.148694476, 0.158935976, 0.164213095, 0.172035004, 0.182788936, 0.191467108, 0.198745564, 0.236141096, 0.251023354, 0.260559242, 0.269869319, 0.267395074, 0.289633894, 0.324312632, 0.339849438, 0.378194635, 0.408387184, 0.464577322, 0.517981768, 0.541049098, 0.59109023, 0.61676294, 0.68337817, 0.787474269, 0.884242688, 1.01322143, 1.14073805, 1.2811697, 1.49290078, 1.83601828, 1.95325999, 2.33987328, 2.57445716, 3.13909918, 3.67670152, 4.67812618, 5.5424493, 7.05775804, 7.89698372, 10.1939235])
  xs_exp_limits_2sigma = array('d', [2.4690666, 2.2519863, 1.71595548, 1.51299118, 1.39640118, 1.12026578, 1.04077014, 0.909998384, 0.781593552, 0.652044654, 0.621415515, 0.538065048, 0.428839182, 0.385701342, 0.364795653, 0.328818282, 0.3099707, 0.290065465, 0.255242754, 0.243798674, 0.228352692, 0.208093355, 0.193857332, 0.185229044, 0.168073245, 0.15841188, 0.145611679, 0.124602262, 0.11700793, 0.11623941, 0.116002614, 0.10649186, 0.107292264, 0.0974927716, 0.0960868788, 0.093795832, 0.0933597332, 0.092493082, 0.0908790164, 0.0907696047, 0.0906451834, 0.0896004299, 0.0889788592, 0.178196283, 0.189016068, 0.19736967, 0.208211749, 0.220864628, 0.226404575, 0.231157204, 0.252982907, 0.254599152, 0.291686226, 0.346889052, 0.336214448, 0.39717474, 0.375835442, 0.395716326, 0.440853792, 0.481630001, 0.497269798, 0.51548648, 0.527453312, 0.617734632, 0.680001697, 0.720938542, 0.804389814, 0.797866646, 0.928999419, 1.05039084, 1.20134316, 1.4274801, 1.64172785, 1.85709564, 2.0450481, 2.5504175, 2.848369, 3.38174988, 3.7683504, 4.42613192, 5.69462064, 6.73156028, 8.08534174, 10.2849328, 12.2575802, 15.4230705])

##
########################################################

massesTh = array('d', [1000.0,1100.0,1200.0,1300.0,1400.0,1500.0,1600.0,1700.0,1800.0,1900.0,2000.0,2100.0,2200.0,2300.0,2400.0,2500.0,2600.0,2700.0,2800.0,2900.0,3000.0,3100.0,3200.0,3300.0,3400.0,3500.0,3600.0,3700.0,3800.0,3900.0,4000.0,4100.0,4200.0,4300.0,4400.0,4500.0,4600.0,4700.0,4800.0,4900.0,5000.0,5100.0,5200.0,5300.0,5400.0,5500.0,5600.0,5700.0,5800.0,5900.0,6000.0,6100.0,6200.0,6300.0,6400.0,6500.0,6600.0,6700.0,6800.0,6900.0,7000.0,7100.0,7200.0,7300.0,7400.0,7500.0,7600.0,7700.0,7800.0,7900.0,8000.0,8100.0,8200.0,8300.0,8400.0,8500.0,8600.0,8700.0,8800.0,8900.0,9000.0])

xsAxi = array('d', [0.1849E+03,0.1236E+03,0.8473E+02,0.5937E+02,0.4235E+02,0.3069E+02,0.2257E+02,0.1680E+02,0.1263E+02,0.9577E+01,0.7317E+01,0.5641E+01,0.4374E+01,0.3411E+01,0.2672E+01,0.2103E+01,0.1658E+01,0.1312E+01,0.1041E+01,0.8284E+00,0.6610E+00,0.5294E+00,0.4250E+00,0.3417E+00,0.2752E+00,0.2220E+00,0.1792E+00,0.1449E+00,0.1172E+00,0.9487E-01,0.7686E-01,0.6219E-01,0.5033E-01,0.4074E-01,0.3298E-01,0.2671E-01,0.2165E-01,0.1755E-01,0.1422E-01,0.1152E-01,0.9322E-02,0.7539E-02,0.6092E-02,0.4917E-02,0.3965E-02,0.3193E-02,0.2568E-02,0.2062E-02,0.1653E-02,0.1323E-02,0.1057E-02,0.8442E-03,0.6728E-03,0.5349E-03,0.4242E-03,0.3357E-03,0.2644E-03,0.2077E-03,0.1627E-03,0.1271E-03,0.9891E-04,0.7686E-04,0.5951E-04,0.4592E-04,0.3530E-04,0.2704E-04,0.2059E-04,0.1562E-04,0.1180E-04,0.8882E-05,0.6657E-05,0.4968E-05,0.3693E-05,0.2734E-05,0.2016E-05,0.1481E-05,0.1084E-05,0.7903E-06,0.5744E-06,0.4160E-06,0.3007E-06])
xsDiquark = array('d', [0.5824E+02,0.4250E+02,0.3172E+02,0.2411E+02,0.1862E+02,0.1457E+02,0.1153E+02,0.9211E+01,0.7419E+01,0.6019E+01,0.4912E+01,0.4031E+01,0.3323E+01,0.2750E+01,0.2284E+01,0.1903E+01,0.1590E+01,0.1331E+01,0.1117E+01,0.9386E+00,0.7900E+00,0.6658E+00,0.5618E+00,0.4745E+00,0.4010E+00,0.3391E+00,0.2869E+00,0.2428E+00,0.2055E+00,0.1740E+00,0.1473E+00,0.1246E+00,0.1055E+00,0.8922E-01,0.7544E-01,0.6376E-01,0.5385E-01,0.4546E-01,0.3834E-01,0.3231E-01,0.2720E-01,0.2288E-01,0.1922E-01,0.1613E-01,0.1352E-01,0.1132E-01,0.9463E-02,0.7900E-02,0.6584E-02,0.5479E-02,0.4551E-02,0.3774E-02,0.3124E-02,0.2581E-02,0.2128E-02,0.1750E-02,0.1437E-02,0.1177E-02,0.9612E-03,0.7833E-03,0.6366E-03,0.5160E-03,0.4170E-03,0.3360E-03,0.2700E-03,0.2162E-03,0.1725E-03,0.1372E-03,0.1087E-03,0.8577E-04,0.6742E-04,0.5278E-04,0.4114E-04,0.3192E-04,0.2465E-04,0.1894E-04,0.1448E-04,0.1101E-04,0.8322E-05,0.6253E-05,0.4670E-05])
xsWprime = array('d', [0.8811E+01,0.6024E+01,0.4216E+01,0.3010E+01,0.2185E+01,0.1610E+01,0.1200E+01,0.9043E+00,0.6875E+00,0.5271E+00,0.4067E+00,0.3158E+00,0.2464E+00,0.1932E+00,0.1521E+00,0.1201E+00,0.9512E-01,0.7554E-01,0.6012E-01,0.4792E-01,0.3827E-01,0.3059E-01,0.2448E-01,0.1960E-01,0.1571E-01,0.1259E-01,0.1009E-01,0.8090E-02,0.6483E-02,0.5193E-02,0.4158E-02,0.3327E-02,0.2660E-02,0.2125E-02,0.1695E-02,0.1351E-02,0.1075E-02,0.8546E-03,0.6781E-03,0.5372E-03,0.4248E-03,0.3353E-03,0.2642E-03,0.2077E-03,0.1629E-03,0.1275E-03,0.9957E-04,0.7757E-04,0.6027E-04,0.4670E-04,0.3610E-04,0.2783E-04,0.2140E-04,0.1641E-04,0.1254E-04,0.9561E-05,0.7269E-05,0.5510E-05,0.4167E-05,0.3143E-05,0.2364E-05,0.1774E-05,0.1329E-05,0.9931E-06,0.7411E-06,0.5523E-06,0.4108E-06,0.3055E-06,0.2271E-06,0.1687E-06,0.1254E-06,0.9327E-07,0.6945E-07,0.5177E-07,0.3863E-07,0.2888E-07,0.2162E-07,0.1622E-07,0.1218E-07,0.9156E-08,0.6893E-08])
xsZprime = array('d', [0.5027E+01,0.3398E+01,0.2353E+01,0.1663E+01,0.1196E+01,0.8729E+00,0.6450E+00,0.4822E+00,0.3638E+00,0.2769E+00,0.2123E+00,0.1639E+00,0.1272E+00,0.9933E-01,0.7789E-01,0.6134E-01,0.4848E-01,0.3845E-01,0.3059E-01,0.2440E-01,0.1952E-01,0.1564E-01,0.1256E-01,0.1010E-01,0.8142E-02,0.6570E-02,0.5307E-02,0.4292E-02,0.3473E-02,0.2813E-02,0.2280E-02,0.1848E-02,0.1499E-02,0.1216E-02,0.9864E-03,0.8002E-03,0.6490E-03,0.5262E-03,0.4264E-03,0.3453E-03,0.2795E-03,0.2260E-03,0.1826E-03,0.1474E-03,0.1188E-03,0.9566E-04,0.7690E-04,0.6173E-04,0.4947E-04,0.3957E-04,0.3159E-04,0.2516E-04,0.2001E-04,0.1587E-04,0.1255E-04,0.9906E-05,0.7795E-05,0.6116E-05,0.4785E-05,0.3731E-05,0.2900E-05,0.2247E-05,0.1734E-05,0.1334E-05,0.1022E-05,0.7804E-06,0.5932E-06,0.4492E-06,0.3388E-06,0.2544E-06,0.1903E-06,0.1417E-06,0.1051E-06,0.7764E-07,0.5711E-07,0.4186E-07,0.3055E-07,0.2223E-07,0.1612E-07,0.1164E-07,0.8394E-08])

graph_xsAxi = TGraph(len(massesTh),massesTh,xsAxi)
graph_xsAxi.SetLineWidth(3)
graph_xsAxi.SetLineStyle(3)
graph_xsAxi.SetLineColor(63)

graph_xsDiquark = TGraph(len(massesTh),massesTh,xsDiquark)
graph_xsDiquark.SetLineWidth(3)
graph_xsDiquark.SetLineStyle(9)
graph_xsDiquark.SetLineColor(8)

graph_xsWprime = TGraph(len(massesTh),massesTh,xsWprime)
graph_xsWprime.SetLineWidth(3)
graph_xsWprime.SetLineStyle(7)
graph_xsWprime.SetLineColor(46)

graph_xsZprime = TGraph(len(massesTh),massesTh,xsZprime)
graph_xsZprime.SetLineWidth(3)
graph_xsZprime.SetLineStyle(5)
graph_xsZprime.SetLineColor(38)

graph_exp_2sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_2sigma)
graph_exp_2sigma.SetFillColor(kYellow)
graph_exp_2sigma.GetXaxis().SetTitle("qq resonance mass [GeV]")
graph_exp_2sigma.GetYaxis().SetTitle("#sigma#timesBR(X#rightarrowjj)#timesA [pb]")
graph_exp_2sigma.GetYaxis().SetRangeUser(1e-02,1e+03)
#graph_exp_2sigma.GetXaxis().SetNdivisions(1005)

graph_exp_1sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_1sigma)
graph_exp_1sigma.SetFillColor(kGreen+1)

graph_exp = TGraph(len(masses),masses,xs_exp_limits)
#graph_exp.SetMarkerStyle(24)
graph_exp.SetLineWidth(3)
graph_exp.SetLineStyle(2)
graph_exp.SetLineColor(4)

graph_obs = TGraph(len(masses),masses,xs_obs_limits)
graph_obs.SetMarkerStyle(20)
graph_obs.SetLineWidth(2)
#graph_obs.SetLineStyle(1)
graph_obs.SetLineColor(1)


c = TCanvas("c", "",800,800)
c.cd()

graph_exp_2sigma.Draw("AF")
graph_exp_1sigma.Draw("F")
graph_exp.Draw("L")
graph_obs.Draw("LP")
graph_xsAxi.Draw("L")
graph_xsDiquark.Draw("L")
graph_xsWprime.Draw("L")
graph_xsZprime.Draw("L")

legend = TLegend(.50,.55,.80,.70)
legend.SetBorderSize(0)
legend.SetFillColor(0)
legend.SetFillStyle(0)
legend.SetTextFont(42)
legend.SetTextSize(0.03)
legend.SetHeader('95% CL upper limits' + ('' if syst else ' (stat. only)'))
legend.AddEntry(graph_obs,"Observed (pseudo-data)","lp")
legend.AddEntry(graph_exp,"Expected","lp")
legend.AddEntry(graph_exp_1sigma,"#pm 1#sigma","F")
legend.AddEntry(graph_exp_2sigma,"#pm 2#sigma","F")
legend.Draw()

legendTh = TLegend(.50,.72,.80,.88)
legendTh.SetBorderSize(0)
legendTh.SetFillColor(0)
legendTh.SetFillStyle(0)
legendTh.SetTextFont(42)
legendTh.SetTextSize(0.03)
legendTh.AddEntry(graph_xsAxi,"Axigluon/coloron","l")
legendTh.AddEntry(graph_xsDiquark,"Scalar diquark","l")
legendTh.AddEntry(graph_xsWprime,"W' SSM","l")
legendTh.AddEntry(graph_xsZprime,"Z' SSM","l")
legendTh.Draw()

#l1 = TLatex()
#l1.SetTextAlign(12)
#l1.SetTextFont(42)
#l1.SetNDC()
#l1.SetTextSize(0.04)
#l1.SetTextSize(0.04)
#l1.DrawLatex(0.18,0.40, "CMS Preliminary")
#l1.DrawLatex(0.18,0.32, "#intLdt = 1 fb^{-1}")
#l1.DrawLatex(0.19,0.27, "#sqrt{s} = 13 TeV")

#draw the lumi text on the canvas
CMS_lumi.extraText = "Preliminary"
CMS_lumi.lumi_sqrtS = "37 pb^{-1} (13 TeV)" # used with iPeriod = 0, e.g. for simulation-only plots (default is an empty string)
iPos = 11
iPeriod = 0

CMS_lumi.CMS_lumi(c, iPeriod, iPos)

gPad.RedrawAxis()

c.SetLogy()
c.SaveAs('xs_limit_DijetLimitCode_qq' + ('_NoSyst' if not syst else '') + '_Run2_13TeV_DATA_37_invpb.eps')
