#!/usr/bin/env python

import sys, os, subprocess, string, re
from ROOT import *
from array import array
import CMS_lumi


gROOT.SetBatch(kTRUE);
gStyle.SetOptStat(0)
gStyle.SetOptTitle(0)
gStyle.SetTitleFont(42, "XYZ")
gStyle.SetTitleSize(0.06, "XYZ")
gStyle.SetLabelFont(42, "XYZ")
gStyle.SetLabelSize(0.05, "XYZ")
gStyle.SetCanvasBorderMode(0)
gStyle.SetFrameBorderMode(0)
gStyle.SetCanvasColor(kWhite)
gStyle.SetPadTickX(1)
gStyle.SetPadTickY(1)
gStyle.SetPadLeftMargin(0.15)
gStyle.SetPadRightMargin(0.05)
gStyle.SetPadTopMargin(0.06)
gStyle.SetPadBottomMargin(0.14)
gROOT.ForceStyle()

masses = array('d')
xs_obs_limits = array('d')
xs_exp_limits = array('d')
masses_exp = array('d')
xs_exp_limits_1sigma = array('d')
xs_exp_limits_1sigma_up = array('d')
xs_exp_limits_2sigma = array('d')
xs_exp_limits_2sigma_up = array('d')


syst = True
syst = False

mass_min = 1500
mass_max = 7000

########################################################
## Uncomment this part if running the limit code


### for running the limit code
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #cmd = "./stats " + str(int(mass)) + " gg | tee stats_" + str(int(mass)) + "_gg.log"
  #print "Running: " + cmd
  #proc = subprocess.Popen( cmd, shell=True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT )
  #output = proc.communicate()[0]
  #if proc.returncode != 0:
    #print output
    #sys.exit(1)
  ##print output

  #outputlines = output.split("\n")

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

### for reading the limit code log files
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #log_file = open("stats_" + str(int(mass)) + "_gg.log",'r')
  #outputlines = log_file.readlines()
  #log_file.close()

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

#for i in range(0,len(masses)):
  #masses_exp.append( masses[len(masses)-i-1] )
  #xs_exp_limits_1sigma.append( xs_exp_limits_1sigma_up[len(masses)-i-1] )
  #xs_exp_limits_2sigma.append( xs_exp_limits_2sigma_up[len(masses)-i-1] )


#print "masses =", masses
#print "xs_obs_limits =", xs_obs_limits
#print "xs_exp_limits =", xs_exp_limits
#print ""
#print "masses_exp =", masses_exp
#print "xs_exp_limits_1sigma =", xs_exp_limits_1sigma
#print "xs_exp_limits_2sigma =", xs_exp_limits_2sigma

##
########################################################

########################################################
## Comment out this part if running the limit code

masses = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0])
xs_obs_limits = array('d', [1.97966, 1.44686, 4.24531, 3.61632, 2.10587, 0.925743, 0.44219, 0.359341, 0.249012, 0.332473, 0.391436, 0.221282, 0.125706, 0.110354, 0.106047, 0.109419, 0.11544, 0.120508, 0.126715, 0.160781, 0.224328, 0.261943, 0.277566, 0.286214, 0.306579, 0.310011, 0.303638, 0.257599, 0.200738, 0.140233, 0.0854135, 0.050237, 0.0321776, 0.0241386, 0.0265484, 0.02402, 0.0225695, 0.0214632, 0.0202706, 0.0194582, 0.0191486, 0.0193913, 0.0187462, 0.020446, 0.0209345, 0.0209461, 0.0209763, 0.0207014, 0.0201477, 0.0194055, 0.0184845, 0.0193413, 0.0193441, 0.0195578, 0.0198946, 0.0203679])
xs_exp_limits = array('d', [1.9034, 1.55461, 1.23894, 1.08591, 0.895625, 0.784296, 0.747708, 0.624879, 0.510395, 0.460039, 0.400166, 0.36198, 0.350691, 0.283986, 0.252425, 0.235202, 0.209873, 0.188357, 0.159364, 0.14696, 0.133125, 0.118937, 0.0994132, 0.098904, 0.0835697, 0.0754351, 0.0608365, 0.0589269, 0.0560471, 0.0547602, 0.050728, 0.0517253, 0.0502674, 0.0501922, 0.0391102, 0.0361167, 0.0333804, 0.0321063, 0.0303793, 0.028856, 0.0277679, 0.0270082, 0.0262819, 0.0239588, 0.023738, 0.021793, 0.0214536, 0.0218279, 0.0218575, 0.0218225, 0.0230546, 0.0217282, 0.0219554, 0.0222256, 0.0223259, 0.0231126])

masses_exp = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0, 7000.0, 6900.0, 6800.0, 6700.0, 6600.0, 6500.0, 6400.0, 6300.0, 6200.0, 6100.0, 6000.0, 5900.0, 5800.0, 5700.0, 5600.0, 5500.0, 5400.0, 5300.0, 5200.0, 5100.0, 5000.0, 4900.0, 4800.0, 4700.0, 4600.0, 4500.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0])
xs_exp_limits_1sigma = array('d', [0.718021, 0.747522, 0.62789, 0.591999, 0.475085, 0.454494, 0.432451, 0.355502, 0.316553, 0.263598, 0.247299, 0.218603, 0.202986, 0.177408, 0.160106, 0.145056, 0.130313, 0.120405, 0.111059, 0.0999737, 0.0813133, 0.0736557, 0.0668101, 0.0623722, 0.0536649, 0.0520602, 0.049277, 0.0454793, 0.0420636, 0.0376225, 0.0344884, 0.0350704, 0.0344766, 0.032748, 0.0281456, 0.0270494, 0.0258264, 0.0248551, 0.0234977, 0.0221952, 0.020916, 0.0200139, 0.0197778, 0.0188527, 0.0176327, 0.0169267, 0.0168715, 0.0171453, 0.0170064, 0.0169253, 0.0178403, 0.0174601, 0.0177798, 0.018189, 0.0186319, 0.0191872, 0.0303806, 0.0302059, 0.0300339, 0.0297034, 0.0300378, 0.0314785, 0.0298662, 0.0304724, 0.0301432, 0.0306191, 0.0307263, 0.0319831, 0.0341032, 0.0385823, 0.0383882, 0.04082, 0.0433325, 0.0456313, 0.0497536, 0.0516483, 0.0548023, 0.0588489, 0.0712119, 0.0758239, 0.0803862, 0.0753069, 0.0838197, 0.0844879, 0.091808, 0.0995038, 0.120364, 0.134679, 0.15392, 0.167418, 0.194602, 0.202277, 0.231668, 0.262798, 0.282453, 0.329418, 0.371112, 0.418352, 0.475692, 0.540352, 0.614316, 0.702915, 0.806182, 0.885542, 1.08599, 1.32592, 1.41308, 1.52421, 2.00906, 2.48652, 3.59267, 4.2688])
xs_exp_limits_2sigma = array('d', [0.393535, 0.459158, 0.377498, 0.396851, 0.325378, 0.294867, 0.249124, 0.207569, 0.193727, 0.166866, 0.158154, 0.134266, 0.133221, 0.121844, 0.11106, 0.09959, 0.0940529, 0.0851213, 0.0735764, 0.072342, 0.0585146, 0.0570106, 0.0522055, 0.0462767, 0.0406242, 0.0396648, 0.0397576, 0.0363329, 0.0337407, 0.0302558, 0.0281501, 0.0283927, 0.0263269, 0.0251481, 0.0241828, 0.022111, 0.0207474, 0.019635, 0.0181417, 0.0178812, 0.0172601, 0.0160635, 0.0163031, 0.0155503, 0.0154981, 0.0144799, 0.0146873, 0.0149041, 0.0151138, 0.015055, 0.0156843, 0.0155749, 0.0156985, 0.0159899, 0.0164691, 0.0169916, 0.0402761, 0.0409969, 0.0414356, 0.0400434, 0.0395587, 0.0457765, 0.0428732, 0.0400199, 0.0424769, 0.0425875, 0.0408259, 0.0453147, 0.0491491, 0.0537835, 0.0547177, 0.0586179, 0.0616505, 0.0685816, 0.072317, 0.0766066, 0.0849318, 0.0938005, 0.0954186, 0.104507, 0.107892, 0.118936, 0.113149, 0.127206, 0.128611, 0.134964, 0.167553, 0.187587, 0.224567, 0.244612, 0.26982, 0.308142, 0.349114, 0.364169, 0.446406, 0.490023, 0.5476, 0.652283, 0.715624, 0.842101, 0.953639, 1.01385, 1.14593, 1.40815, 1.70934, 1.93182, 2.12894, 2.55242, 3.01937, 3.93384, 5.74831, 7.28396])

if syst:
  masses = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0])
  xs_obs_limits = array('d', [18.0287, 15.6733, 8.6325, 3.91811, 2.1875, 1.69301, 2.13894, 2.80253, 2.79607, 2.63993, 2.65454, 2.58143, 2.36525, 1.83277, 1.27788, 1.03022, 1.11398, 1.13528, 1.05868, 0.910854, 0.720537, 0.592423, 0.492657, 0.397243, 0.311835, 0.251862, 0.207095, 0.18806, 0.184561, 0.177655, 0.169964, 0.166488, 0.155208, 0.159438, 0.162678, 0.164746, 0.166951, 0.167498, 0.164833, 0.162225, 0.156879, 0.153625, 0.146906, 0.139942, 0.13422, 0.128718, 0.125957, 0.125876, 0.124731, 0.125308, 0.132913, 0.135618, 0.13851, 0.142256, 0.145583, 0.149747])
  xs_exp_limits = array('d', [10.4422, 8.9131, 7.47655, 6.2181, 5.2968, 4.500395, 3.855925, 3.167, 2.69755, 2.292435, 1.940255, 1.683285, 1.418775, 1.24041, 1.11487, 0.9766635, 0.844834, 0.7089375, 0.625544, 0.5524985, 0.5503275, 0.4784735, 0.4144995, 0.402687, 0.3619335, 0.3407565, 0.3199655, 0.2868715, 0.260819, 0.241752, 0.219856, 0.2151445, 0.202777, 0.1877995, 0.1729915, 0.1606085, 0.1550125, 0.144495, 0.141409, 0.137229, 0.1342635, 0.131153, 0.127747, 0.12215, 0.1202925, 0.1166245, 0.117466, 0.1217755, 0.121739, 0.121855, 0.1236985, 0.125862, 0.1290245, 0.132092, 0.13631, 0.140493])

  masses_exp = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0, 7000.0, 6900.0, 6800.0, 6700.0, 6600.0, 6500.0, 6400.0, 6300.0, 6200.0, 6100.0, 6000.0, 5900.0, 5800.0, 5700.0, 5600.0, 5500.0, 5400.0, 5300.0, 5200.0, 5100.0, 5000.0, 4900.0, 4800.0, 4700.0, 4600.0, 4500.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0])
  xs_exp_limits_1sigma = array('d', [6.21123476, 5.26774792, 4.36130257, 3.92517088, 3.62367304, 3.1688113, 2.71086825, 2.22266038, 1.87066821, 1.6134789, 1.35538591, 1.14366417, 0.973090906, 0.880815864, 0.780716373, 0.672944018, 0.583737785, 0.486137268, 0.436473526, 0.391914933, 0.375144287, 0.334171995, 0.295714159, 0.277061038, 0.263978496, 0.24036933, 0.218494429, 0.210549895, 0.1860362, 0.175329411, 0.164290302, 0.15017127, 0.15097111, 0.139251541, 0.129000335, 0.121852994, 0.114884839, 0.112090308, 0.107497497, 0.104425647, 0.101918181, 0.0985768604, 0.0967240176, 0.0978627275, 0.0964360191, 0.0948344489, 0.0964151674, 0.0993765189, 0.101031698, 0.104074866, 0.103545774, 0.106127594, 0.109081025, 0.112095849, 0.115649523, 0.119279916, 0.178622177, 0.173040947, 0.170098988, 0.166666883, 0.163844335, 0.161533796, 0.165038406, 0.164566366, 0.163415196, 0.162356946, 0.156588746, 0.163000724, 0.167001067, 0.172389747, 0.178661832, 0.183550924, 0.193918855, 0.198610202, 0.197859598, 0.227741346, 0.235231649, 0.248077328, 0.262762694, 0.308964994, 0.302282313, 0.322546232, 0.364378886, 0.375145427, 0.412668625, 0.469653668, 0.504513639, 0.539266796, 0.594023462, 0.588069243, 0.687031341, 0.784097076, 0.832520944, 0.923402771, 1.08663353, 1.25484349, 1.45501727, 1.65018378, 1.86366904, 2.09552459, 2.45080602, 2.89172908, 3.36528267, 3.76500412, 4.43536148, 5.56642359, 6.57651434, 7.48619724, 9.20909846, 11.7407675, 13.4752294, 18.1688591])
  xs_exp_limits_2sigma = array('d', [4.13138985, 3.21887024, 2.74955129, 2.70920042, 2.34549972, 2.0751619, 1.76364209, 1.66353852, 1.35870571, 1.19483766, 1.02480137, 0.839703034, 0.699227499, 0.656588448, 0.556879603, 0.501896998, 0.435314986, 0.368385357, 0.312124235, 0.310869604, 0.289678626, 0.255802094, 0.238445697, 0.214639598, 0.198199573, 0.184097747, 0.165507971, 0.161417087, 0.150125485, 0.132436442, 0.129053316, 0.127601918, 0.120263858, 0.10776226, 0.104534027, 0.0966922096, 0.0953319424, 0.0933798708, 0.0896073309, 0.0885899154, 0.0884077286, 0.0871315166, 0.0864900831, 0.0852969915, 0.0845176672, 0.0843281709, 0.0867340028, 0.0880801375, 0.090515376, 0.0931598802, 0.0934007325, 0.0962620894, 0.0990598081, 0.101685524, 0.104850065, 0.108589081, 0.247903628, 0.24249601, 0.237021659, 0.233242629, 0.22865918, 0.228457345, 0.232357986, 0.228886816, 0.231171531, 0.224348404, 0.215377259, 0.230353995, 0.237969484, 0.24534997, 0.248604114, 0.256775158, 0.259767017, 0.268449538, 0.278327136, 0.318409261, 0.316953385, 0.358192821, 0.370259557, 0.427721484, 0.453463059, 0.454163746, 0.49550195, 0.518073945, 0.614585016, 0.655984169, 0.692087759, 0.727687211, 0.80751574, 0.808281262, 0.939624131, 1.03679852, 1.19514181, 1.32925097, 1.4809772, 1.75900633, 1.94401271, 2.19141083, 2.7067759, 2.81269465, 3.17864731, 3.93668574, 4.45634077, 4.99311173, 6.16222264, 8.22243635, 9.26108307, 10.6994382, 13.016748, 17.0977239, 21.9691376, 24.3170575])

##
########################################################

massesS8 = array('d', [1000.0,1100.0,1200.0,1300.0,1400.0,1500.0,1600.0,1700.0,1800.0,1900.0,2000.0,2100.0,2200.0,2300.0,2400.0,2500.0,2600.0,2700.0,2800.0,2900.0,3000.0,3100.0,3200.0,3300.0,3400.0,3500.0,3600.0,3700.0,3800.0,3900.0,4000.0,4100.0,4200.0,4300.0,4400.0,4500.0,4600.0,4700.0,4800.0,4900.0,5000.0,5100.0,5200.0,5300.0,5400.0,5500.0,5600.0,5700.0,5800.0,5900.0,6000.0])
xsS8 = array('d', [5.15E+02,2.93E+02,1.73E+02,1.11E+02,6.68E+01,4.29E+01,2.86E+01,1.90E+01,1.30E+01,8.71E+00,6.07E+00,4.32E+00,2.99E+00,2.14E+00,1.53E+00,1.09E+00,8.10E-01,5.83E-01,4.38E-01,3.25E-01,2.43E-01,1.78E-01,1.37E-01,1.03E-01,7.66E-02,5.76E-02,4.46E-02,3.42E-02,2.60E-02,1.94E-02,1.50E-02,1.20E-02,9.12E-03,6.99E-03,5.47E-03,4.19E-03,3.21E-03,2.53E-03,1.90E-03,1.50E-03,1.18E-03,9.13E-04,7.07E-04,5.60E-04,4.35E-04,3.36E-04,2.59E-04,2.09E-04,1.59E-04,1.21E-04,9.38E-05])

xs_max = 2.8e+01
idx = 0

for i, xs in enumerate(xsS8):
  if xs < xs_max:
    idx = i
    break

graph_xsS8 = TGraph(len(massesS8[idx:-1]),massesS8[idx:-1],xsS8[idx:-1])
graph_xsS8.SetLineWidth(3)
graph_xsS8.SetLineStyle(8)
graph_xsS8.SetLineColor(6)

graph_exp_2sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_2sigma)
graph_exp_2sigma.SetFillColor(kYellow)
graph_exp_2sigma.GetXaxis().SetTitle("gg resonance mass [GeV]")
graph_exp_2sigma.GetYaxis().SetTitle("#sigma #times #it{B} #times #it{A} [pb]")
graph_exp_2sigma.GetYaxis().SetTitleOffset(1.1)
graph_exp_2sigma.GetYaxis().SetRangeUser(5e-03,1e+02)
#graph_exp_2sigma.GetXaxis().SetNdivisions(1005)

graph_exp_1sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_1sigma)
graph_exp_1sigma.SetFillColor(kGreen+1)

graph_exp = TGraph(len(masses),masses,xs_exp_limits)
#graph_exp.SetMarkerStyle(24)
graph_exp.SetLineWidth(3)
graph_exp.SetLineStyle(2)
graph_exp.SetLineColor(4)

graph_obs = TGraph(len(masses),masses,xs_obs_limits)
graph_obs.SetMarkerStyle(20)
graph_obs.SetLineWidth(3)
#graph_obs.SetLineStyle(1)
graph_obs.SetLineColor(1)


c = TCanvas("c", "",800,800)
c.cd()

graph_exp_2sigma.Draw("AF")
graph_exp_1sigma.Draw("F")
graph_exp.Draw("L")
graph_obs.Draw("LP")
graph_xsS8.Draw("L")

legend = TLegend(.55,.50,.90,.70)
legend.SetBorderSize(0)
legend.SetFillColor(0)
legend.SetFillStyle(0)
legend.SetTextFont(42)
legend.SetTextSize(0.035)
legend.SetHeader('95% CL upper limits')
legend.AddEntry(graph_obs,"Observed","lp")
legend.AddEntry(graph_exp,"Expected","lp")
legend.AddEntry(graph_exp_1sigma,"#pm 1#sigma","F")
legend.AddEntry(graph_exp_2sigma,"#pm 2#sigma","F")
legend.Draw()

legendTh = TLegend(.55,.80,.90,.84)
legendTh.SetBorderSize(0)
legendTh.SetFillColor(0)
legendTh.SetFillStyle(0)
legendTh.SetTextFont(42)
legendTh.SetTextSize(0.035)
legendTh.AddEntry(graph_xsS8,"S8","l")
legendTh.Draw()

#l1 = TLatex()
#l1.SetTextAlign(12)
#l1.SetTextFont(42)
#l1.SetNDC()
#l1.SetTextSize(0.04)
#l1.SetTextSize(0.04)
#l1.DrawLatex(0.18,0.40, "CMS Preliminary")
#l1.DrawLatex(0.18,0.32, "#intLdt = 1 fb^{-1}")
#l1.DrawLatex(0.19,0.27, "#sqrt{s} = 13 TeV")

#draw the lumi text on the canvas
CMS_lumi.extraText = "Preliminary"
CMS_lumi.lumi_sqrtS = "547 pb^{-1} (13 TeV)" # used with iPeriod = 0, e.g. for simulation-only plots (default is an empty string)
iPos = 11
if( iPos==0 ): CMS_lumi.relPosX = 0.15
iPeriod = 0

CMS_lumi.CMS_lumi(c, iPeriod, iPos)

gPad.RedrawAxis()

c.SetLogy()
c.SaveAs('xs_limit_DijetLimitCode_gg' + ('_NoSyst' if not syst else '') + '_Run2_13TeV_DATA_547_invpb.eps')
