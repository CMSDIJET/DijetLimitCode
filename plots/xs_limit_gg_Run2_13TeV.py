#!/usr/bin/env python

import sys, os, subprocess, string, re
from ROOT import *
from array import array
import CMS_lumi


gROOT.SetBatch(kTRUE);
gStyle.SetOptStat(0)
gStyle.SetOptTitle(0)
gStyle.SetTitleFont(42, "XYZ")
gStyle.SetTitleSize(0.06, "XYZ")
gStyle.SetLabelFont(42, "XYZ")
gStyle.SetLabelSize(0.05, "XYZ")
gStyle.SetCanvasBorderMode(0)
gStyle.SetFrameBorderMode(0)
gStyle.SetCanvasColor(kWhite)
gStyle.SetPadTickX(1)
gStyle.SetPadTickY(1)
gStyle.SetPadLeftMargin(0.15)
gStyle.SetPadRightMargin(0.05)
gStyle.SetPadTopMargin(0.06)
gStyle.SetPadBottomMargin(0.14)
gROOT.ForceStyle()

masses = array('d')
xs_obs_limits = array('d')
xs_exp_limits = array('d')
masses_exp = array('d')
xs_exp_limits_1sigma = array('d')
xs_exp_limits_1sigma_up = array('d')
xs_exp_limits_2sigma = array('d')
xs_exp_limits_2sigma_up = array('d')


syst = True
syst = False

mass_min = 1500
mass_max = 7000

########################################################
## Uncomment this part if running the limit code


### for running the limit code
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #cmd = "./stats " + str(int(mass)) + " gg | tee stats_" + str(int(mass)) + "_gg.log"
  #print "Running: " + cmd
  #proc = subprocess.Popen( cmd, shell=True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT )
  #output = proc.communicate()[0]
  #if proc.returncode != 0:
    #print output
    #sys.exit(1)
  ##print output

  #outputlines = output.split("\n")

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

### for reading the limit code log files
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #log_file = open("stats_" + str(int(mass)) + "_gg.log",'r')
  #outputlines = log_file.readlines()
  #log_file.close()

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

#for i in range(0,len(masses)):
  #masses_exp.append( masses[len(masses)-i-1] )
  #xs_exp_limits_1sigma.append( xs_exp_limits_1sigma_up[len(masses)-i-1] )
  #xs_exp_limits_2sigma.append( xs_exp_limits_2sigma_up[len(masses)-i-1] )


#print "masses =", masses
#print "xs_obs_limits =", xs_obs_limits
#print "xs_exp_limits =", xs_exp_limits
#print ""
#print "masses_exp =", masses_exp
#print "xs_exp_limits_1sigma =", xs_exp_limits_1sigma
#print "xs_exp_limits_2sigma =", xs_exp_limits_2sigma

##
########################################################

########################################################
## Comment out this part if running the limit code

masses = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0])
xs_obs_limits = array('d', [0.774406, 0.986218, 1.75866, 1.14641, 0.919007, 0.737969, 0.392757, 0.279419, 0.189352, 0.168139, 0.168823, 0.139586, 0.112821, 0.0966805, 0.0797317, 0.0730251, 0.0777934, 0.0925955, 0.0952212, 0.0900524, 0.0882402, 0.0900611, 0.0943155, 0.0976048, 0.100283, 0.0990596, 0.0922381, 0.0766865, 0.0552401, 0.0354419, 0.0256382, 0.0186629, 0.0145845, 0.0123074, 0.0112314, 0.0114168, 0.012173, 0.0127663, 0.0128261, 0.01233, 0.0118628, 0.0118075, 0.0121371, 0.01201, 0.0119846, 0.0117518, 0.0116898, 0.0114021, 0.0109518, 0.0103538, 0.00979565, 0.00930067, 0.00910024, 0.00945993, 0.00994439, 0.0105076])
xs_exp_limits = array('d', [1.135775, 0.8386765, 0.7627025, 0.6236365, 0.51727, 0.419236, 0.3993075, 0.3559885, 0.284311, 0.24024, 0.2280625, 0.1981365, 0.188856, 0.1642985, 0.152, 0.1254045, 0.1073285, 0.0990953, 0.0897164, 0.0791696, 0.0707024, 0.0635862, 0.0573578, 0.05032625, 0.04748195, 0.0424117, 0.03836, 0.0344605, 0.03161445, 0.02992775, 0.0272681, 0.0264569, 0.02613395, 0.024436, 0.0216682, 0.0210522, 0.0186031, 0.0181665, 0.0161242, 0.01440485, 0.01365405, 0.013109, 0.012854, 0.01212855, 0.010987, 0.009940435, 0.00973575, 0.00959334, 0.00972272, 0.009528715, 0.0094567, 0.00973143, 0.00959768, 0.009403555, 0.009493375, 0.009247495])

masses_exp = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0, 7000.0, 6900.0, 6800.0, 6700.0, 6600.0, 6500.0, 6400.0, 6300.0, 6200.0, 6100.0, 6000.0, 5900.0, 5800.0, 5700.0, 5600.0, 5500.0, 5400.0, 5300.0, 5200.0, 5100.0, 5000.0, 4900.0, 4800.0, 4700.0, 4600.0, 4500.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0])
xs_exp_limits_1sigma = array('d', [0.464414728, 0.402541441, 0.375016009, 0.327198469, 0.299538912, 0.254727911, 0.225210637, 0.196159416, 0.16364538, 0.136830645, 0.139297504, 0.122819524, 0.115149546, 0.103313699, 0.0914524073, 0.0788361835, 0.0701621514, 0.0614813822, 0.0553636938, 0.0518491897, 0.0474456576, 0.0416284307, 0.0365145282, 0.0328329618, 0.0301622299, 0.0277540679, 0.0264419491, 0.0227258767, 0.0217140278, 0.0198371168, 0.0193182382, 0.01768646, 0.0178167349, 0.0163910119, 0.0145637995, 0.0139684523, 0.0128938364, 0.0126658508, 0.0113093651, 0.0108666156, 0.00969838355, 0.00935218465, 0.00905677475, 0.00840763859, 0.00798584756, 0.0078135435, 0.00749576603, 0.00751411143, 0.00738299827, 0.00722378507, 0.00736137237, 0.00733511469, 0.00741154107, 0.00735959292, 0.00748431964, 0.00751857641, 0.0130960433, 0.0146126132, 0.0135709432, 0.0136084552, 0.0142172099, 0.0144883921, 0.0139552567, 0.0136770352, 0.0137236453, 0.0142496246, 0.0142382188, 0.015696577, 0.0166347314, 0.0181713485, 0.0184536258, 0.0205465453, 0.0219712795, 0.0230231303, 0.0274832453, 0.0280216785, 0.0296997605, 0.0322942527, 0.0345115353, 0.0405471104, 0.0407107756, 0.0434485514, 0.045036077, 0.0505783909, 0.053509418, 0.0593379719, 0.0652839036, 0.0718149083, 0.0781309566, 0.09115154, 0.0969017776, 0.110345668, 0.129930899, 0.146250554, 0.160935013, 0.179918345, 0.191598028, 0.236679191, 0.265100093, 0.306772209, 0.344658339, 0.38593476, 0.432571275, 0.529936387, 0.606036842, 0.693655791, 0.836583159, 0.898056011, 1.19964432, 1.47965627, 1.93273453, 2.92027235])
xs_exp_limits_2sigma = array('d', [0.236215683, 0.229761196, 0.22672439, 0.214717193, 0.188859174, 0.163793428, 0.141622067, 0.127397701, 0.108980444, 0.0947379612, 0.0942755456, 0.0823872503, 0.0694469318, 0.0680394748, 0.0601460802, 0.0558078423, 0.0483144495, 0.0433223144, 0.0393819016, 0.0340634363, 0.0337815548, 0.0290718491, 0.0249910034, 0.0242319685, 0.0226487117, 0.0196489911, 0.0181905795, 0.016091039, 0.0151068859, 0.0147163619, 0.0146165038, 0.0132548031, 0.0125961108, 0.0117737399, 0.0116072955, 0.0105309512, 0.00896710446, 0.00918711368, 0.00851744707, 0.00818888335, 0.00799085592, 0.00763466277, 0.0072686012, 0.00719143859, 0.0064071679, 0.00664561681, 0.00640225508, 0.00615149239, 0.00589629471, 0.00587431482, 0.00621374162, 0.00608467911, 0.00595022064, 0.0057902385, 0.00642037836, 0.00642052485, 0.0191567348, 0.0188298687, 0.0194591855, 0.0186587068, 0.0212685131, 0.0202826475, 0.0198653257, 0.0189719638, 0.0190608164, 0.0188533391, 0.0195427145, 0.0215819507, 0.0225411655, 0.024602872, 0.0263120422, 0.0273107633, 0.0298801943, 0.0337559915, 0.0354187098, 0.0399195304, 0.0410829052, 0.0444920938, 0.0481263581, 0.0526463785, 0.0551641105, 0.0618380915, 0.0660708747, 0.0768814085, 0.0779338788, 0.0885582776, 0.094914248, 0.102109616, 0.10912541, 0.131516794, 0.14149284, 0.168660742, 0.170135015, 0.205664215, 0.219881045, 0.256570028, 0.300768148, 0.350844872, 0.386351233, 0.480558114, 0.536907746, 0.591362705, 0.686271782, 0.825270312, 0.970931368, 1.08394561, 1.27151336, 1.62031636, 1.91298503, 2.37309118, 3.30988656, 3.97130462])

if syst:
  masses = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0])
  xs_obs_limits = array('d', [18.0287, 15.6733, 8.6325, 3.91811, 2.1875, 1.69301, 2.13894, 2.80253, 2.79607, 2.63993, 2.65454, 2.58143, 2.36525, 1.83277, 1.27788, 1.03022, 1.11398, 1.13528, 1.05868, 0.910854, 0.720537, 0.592423, 0.492657, 0.397243, 0.311835, 0.251862, 0.207095, 0.18806, 0.184561, 0.177655, 0.169964, 0.166488, 0.155208, 0.159438, 0.162678, 0.164746, 0.166951, 0.167498, 0.164833, 0.162225, 0.156879, 0.153625, 0.146906, 0.139942, 0.13422, 0.128718, 0.125957, 0.125876, 0.124731, 0.125308, 0.132913, 0.135618, 0.13851, 0.142256, 0.145583, 0.149747])
  xs_exp_limits = array('d', [10.4422, 8.9131, 7.47655, 6.2181, 5.2968, 4.500395, 3.855925, 3.167, 2.69755, 2.292435, 1.940255, 1.683285, 1.418775, 1.24041, 1.11487, 0.9766635, 0.844834, 0.7089375, 0.625544, 0.5524985, 0.5503275, 0.4784735, 0.4144995, 0.402687, 0.3619335, 0.3407565, 0.3199655, 0.2868715, 0.260819, 0.241752, 0.219856, 0.2151445, 0.202777, 0.1877995, 0.1729915, 0.1606085, 0.1550125, 0.144495, 0.141409, 0.137229, 0.1342635, 0.131153, 0.127747, 0.12215, 0.1202925, 0.1166245, 0.117466, 0.1217755, 0.121739, 0.121855, 0.1236985, 0.125862, 0.1290245, 0.132092, 0.13631, 0.140493])

  masses_exp = array('d', [1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0, 7000.0, 6900.0, 6800.0, 6700.0, 6600.0, 6500.0, 6400.0, 6300.0, 6200.0, 6100.0, 6000.0, 5900.0, 5800.0, 5700.0, 5600.0, 5500.0, 5400.0, 5300.0, 5200.0, 5100.0, 5000.0, 4900.0, 4800.0, 4700.0, 4600.0, 4500.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0])
  xs_exp_limits_1sigma = array('d', [6.21123476, 5.26774792, 4.36130257, 3.92517088, 3.62367304, 3.1688113, 2.71086825, 2.22266038, 1.87066821, 1.6134789, 1.35538591, 1.14366417, 0.973090906, 0.880815864, 0.780716373, 0.672944018, 0.583737785, 0.486137268, 0.436473526, 0.391914933, 0.375144287, 0.334171995, 0.295714159, 0.277061038, 0.263978496, 0.24036933, 0.218494429, 0.210549895, 0.1860362, 0.175329411, 0.164290302, 0.15017127, 0.15097111, 0.139251541, 0.129000335, 0.121852994, 0.114884839, 0.112090308, 0.107497497, 0.104425647, 0.101918181, 0.0985768604, 0.0967240176, 0.0978627275, 0.0964360191, 0.0948344489, 0.0964151674, 0.0993765189, 0.101031698, 0.104074866, 0.103545774, 0.106127594, 0.109081025, 0.112095849, 0.115649523, 0.119279916, 0.178622177, 0.173040947, 0.170098988, 0.166666883, 0.163844335, 0.161533796, 0.165038406, 0.164566366, 0.163415196, 0.162356946, 0.156588746, 0.163000724, 0.167001067, 0.172389747, 0.178661832, 0.183550924, 0.193918855, 0.198610202, 0.197859598, 0.227741346, 0.235231649, 0.248077328, 0.262762694, 0.308964994, 0.302282313, 0.322546232, 0.364378886, 0.375145427, 0.412668625, 0.469653668, 0.504513639, 0.539266796, 0.594023462, 0.588069243, 0.687031341, 0.784097076, 0.832520944, 0.923402771, 1.08663353, 1.25484349, 1.45501727, 1.65018378, 1.86366904, 2.09552459, 2.45080602, 2.89172908, 3.36528267, 3.76500412, 4.43536148, 5.56642359, 6.57651434, 7.48619724, 9.20909846, 11.7407675, 13.4752294, 18.1688591])
  xs_exp_limits_2sigma = array('d', [4.13138985, 3.21887024, 2.74955129, 2.70920042, 2.34549972, 2.0751619, 1.76364209, 1.66353852, 1.35870571, 1.19483766, 1.02480137, 0.839703034, 0.699227499, 0.656588448, 0.556879603, 0.501896998, 0.435314986, 0.368385357, 0.312124235, 0.310869604, 0.289678626, 0.255802094, 0.238445697, 0.214639598, 0.198199573, 0.184097747, 0.165507971, 0.161417087, 0.150125485, 0.132436442, 0.129053316, 0.127601918, 0.120263858, 0.10776226, 0.104534027, 0.0966922096, 0.0953319424, 0.0933798708, 0.0896073309, 0.0885899154, 0.0884077286, 0.0871315166, 0.0864900831, 0.0852969915, 0.0845176672, 0.0843281709, 0.0867340028, 0.0880801375, 0.090515376, 0.0931598802, 0.0934007325, 0.0962620894, 0.0990598081, 0.101685524, 0.104850065, 0.108589081, 0.247903628, 0.24249601, 0.237021659, 0.233242629, 0.22865918, 0.228457345, 0.232357986, 0.228886816, 0.231171531, 0.224348404, 0.215377259, 0.230353995, 0.237969484, 0.24534997, 0.248604114, 0.256775158, 0.259767017, 0.268449538, 0.278327136, 0.318409261, 0.316953385, 0.358192821, 0.370259557, 0.427721484, 0.453463059, 0.454163746, 0.49550195, 0.518073945, 0.614585016, 0.655984169, 0.692087759, 0.727687211, 0.80751574, 0.808281262, 0.939624131, 1.03679852, 1.19514181, 1.32925097, 1.4809772, 1.75900633, 1.94401271, 2.19141083, 2.7067759, 2.81269465, 3.17864731, 3.93668574, 4.45634077, 4.99311173, 6.16222264, 8.22243635, 9.26108307, 10.6994382, 13.016748, 17.0977239, 21.9691376, 24.3170575])

##
########################################################

massesS8 = array('d', [1000.0,1100.0,1200.0,1300.0,1400.0,1500.0,1600.0,1700.0,1800.0,1900.0,2000.0,2100.0,2200.0,2300.0,2400.0,2500.0,2600.0,2700.0,2800.0,2900.0,3000.0,3100.0,3200.0,3300.0,3400.0,3500.0,3600.0,3700.0,3800.0,3900.0,4000.0,4100.0,4200.0,4300.0,4400.0,4500.0,4600.0,4700.0,4800.0,4900.0,5000.0,5100.0,5200.0,5300.0,5400.0,5500.0,5600.0,5700.0,5800.0,5900.0,6000.0])
xsS8 = array('d', [5.15E+02,2.93E+02,1.73E+02,1.11E+02,6.68E+01,4.29E+01,2.86E+01,1.90E+01,1.30E+01,8.71E+00,6.07E+00,4.32E+00,2.99E+00,2.14E+00,1.53E+00,1.09E+00,8.10E-01,5.83E-01,4.38E-01,3.25E-01,2.43E-01,1.78E-01,1.37E-01,1.03E-01,7.66E-02,5.76E-02,4.46E-02,3.42E-02,2.60E-02,1.94E-02,1.50E-02,1.20E-02,9.12E-03,6.99E-03,5.47E-03,4.19E-03,3.21E-03,2.53E-03,1.90E-03,1.50E-03,1.18E-03,9.13E-04,7.07E-04,5.60E-04,4.35E-04,3.36E-04,2.59E-04,2.09E-04,1.59E-04,1.21E-04,9.38E-05])

xs_max = 2e+01
idx = 0

for i, xs in enumerate(xsS8):
  if xs < xs_max:
    idx = i
    break

graph_xsS8 = TGraph(len(massesS8[idx:-1]),massesS8[idx:-1],xsS8[idx:-1])
graph_xsS8.SetLineWidth(3)
graph_xsS8.SetLineStyle(8)
graph_xsS8.SetLineColor(6)

graph_exp_2sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_2sigma)
graph_exp_2sigma.SetFillColor(kYellow)
graph_exp_2sigma.GetXaxis().SetTitle("gg resonance mass [GeV]")
graph_exp_2sigma.GetYaxis().SetTitle("#sigma #times #it{B} #times #it{A} [pb]")
graph_exp_2sigma.GetYaxis().SetTitleOffset(1.1)
graph_exp_2sigma.GetYaxis().SetRangeUser(1e-03,1e+02)
#graph_exp_2sigma.GetXaxis().SetNdivisions(1005)

graph_exp_1sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_1sigma)
graph_exp_1sigma.SetFillColor(kGreen+1)

graph_exp = TGraph(len(masses),masses,xs_exp_limits)
#graph_exp.SetMarkerStyle(24)
graph_exp.SetLineWidth(3)
graph_exp.SetLineStyle(2)
graph_exp.SetLineColor(4)

graph_obs = TGraph(len(masses),masses,xs_obs_limits)
graph_obs.SetMarkerStyle(20)
graph_obs.SetLineWidth(3)
#graph_obs.SetLineStyle(1)
graph_obs.SetLineColor(1)


c = TCanvas("c", "",800,800)
c.cd()

graph_exp_2sigma.Draw("AF")
graph_exp_1sigma.Draw("F")
graph_exp.Draw("L")
graph_obs.Draw("LP")
graph_xsS8.Draw("L")

legend = TLegend(.55,.50,.90,.70)
legend.SetBorderSize(0)
legend.SetFillColor(0)
legend.SetFillStyle(0)
legend.SetTextFont(42)
legend.SetTextSize(0.035)
legend.SetHeader('95% CL upper limits')
legend.AddEntry(graph_obs,"Observed","lp")
legend.AddEntry(graph_exp,"Expected","lp")
legend.AddEntry(graph_exp_1sigma,"#pm 1#sigma","F")
legend.AddEntry(graph_exp_2sigma,"#pm 2#sigma","F")
legend.Draw()

legendTh = TLegend(.55,.80,.90,.84)
legendTh.SetBorderSize(0)
legendTh.SetFillColor(0)
legendTh.SetFillStyle(0)
legendTh.SetTextFont(42)
legendTh.SetTextSize(0.035)
legendTh.AddEntry(graph_xsS8,"S8","l")
legendTh.Draw()

#l1 = TLatex()
#l1.SetTextAlign(12)
#l1.SetTextFont(42)
#l1.SetNDC()
#l1.SetTextSize(0.04)
#l1.SetTextSize(0.04)
#l1.DrawLatex(0.18,0.40, "CMS Preliminary")
#l1.DrawLatex(0.18,0.32, "#intLdt = 1 fb^{-1}")
#l1.DrawLatex(0.19,0.27, "#sqrt{s} = 13 TeV")

#draw the lumi text on the canvas
CMS_lumi.extraText = "Preliminary"
CMS_lumi.lumi_sqrtS = "1769 pb^{-1} (13 TeV)" # used with iPeriod = 0, e.g. for simulation-only plots (default is an empty string)
iPos = 11
if( iPos==0 ): CMS_lumi.relPosX = 0.15
iPeriod = 0

CMS_lumi.CMS_lumi(c, iPeriod, iPos)

gPad.RedrawAxis()

c.SetLogy()
c.SaveAs('xs_limit_DijetLimitCode_gg' + ('_NoSyst' if not syst else '') + '_Run2_13TeV_DATA_1769_invpb.eps')
