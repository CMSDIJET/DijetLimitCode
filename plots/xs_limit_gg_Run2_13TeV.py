#!/usr/bin/env python

import sys, os, subprocess, string, re
from ROOT import *
from array import array
import CMS_lumi


gROOT.SetBatch(kTRUE);
gStyle.SetOptStat(0)
gStyle.SetOptTitle(0)
gStyle.SetTitleFont(42, "XYZ")
gStyle.SetTitleSize(0.06, "XYZ")
gStyle.SetLabelFont(42, "XYZ")
gStyle.SetLabelSize(0.05, "XYZ")
gStyle.SetCanvasBorderMode(0)
gStyle.SetFrameBorderMode(0)
gStyle.SetCanvasColor(kWhite)
gStyle.SetPadTickX(1)
gStyle.SetPadTickY(1)
gStyle.SetPadLeftMargin(0.15)
gStyle.SetPadRightMargin(0.05)
gStyle.SetPadTopMargin(0.05)
gStyle.SetPadBottomMargin(0.15)
gROOT.ForceStyle()

masses = array('d')
xs_obs_limits = array('d')
xs_exp_limits = array('d')
masses_exp = array('d')
xs_exp_limits_1sigma = array('d')
xs_exp_limits_1sigma_up = array('d')
xs_exp_limits_2sigma = array('d')
xs_exp_limits_2sigma_up = array('d')


syst = True
#syst = False

mass_min = 1300
mass_max = 7000

########################################################
## Uncomment this part if running the limit code


### for running the limit code
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #cmd = "./stats " + str(int(mass)) + " gg | tee stats_" + str(int(mass)) + "_gg.log"
  #print "Running: " + cmd
  #proc = subprocess.Popen( cmd, shell=True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT )
  #output = proc.communicate()[0]
  #if proc.returncode != 0:
    #print output
    #sys.exit(1)
  ##print output

  #outputlines = output.split("\n")

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

### for reading the limit code log files
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #log_file = open("stats_" + str(int(mass)) + "_gg.log",'r')
  #outputlines = log_file.readlines()
  #log_file.close()

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

#for i in range(0,len(masses)):
  #masses_exp.append( masses[len(masses)-i-1] )
  #xs_exp_limits_1sigma.append( xs_exp_limits_1sigma_up[len(masses)-i-1] )
  #xs_exp_limits_2sigma.append( xs_exp_limits_2sigma_up[len(masses)-i-1] )


#print "masses =", masses
#print "xs_obs_limits =", xs_obs_limits
#print "xs_exp_limits =", xs_exp_limits
#print ""
#print "masses_exp =", masses_exp
#print "xs_exp_limits_1sigma =", xs_exp_limits_1sigma
#print "xs_exp_limits_2sigma =", xs_exp_limits_2sigma

##
########################################################

########################################################
## Comment out this part if running the limit code

masses = array('d', [1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0])
xs_obs_limits = array('d', [10.5454, 19.7451, 12.3585, 3.12581, 3.3185, 1.91614, 1.16177, 1.37181, 1.84513, 1.81173, 1.59247, 1.8136, 2.24945, 2.03803, 1.38889, 1.29787, 1.38632, 1.33388, 1.14575, 0.866594, 0.635951, 0.500446, 0.37322, 0.310025, 0.291638, 0.277028, 0.25957, 0.255045, 0.249723, 0.23554, 0.218904, 0.206927, 0.19663, 0.203432, 0.212901, 0.215584, 0.21468, 0.212325, 0.209186, 0.204148, 0.198026, 0.191322, 0.1857, 0.181377, 0.177349, 0.172401, 0.16765, 0.165819, 0.167806, 0.170941, 0.172965, 0.174285, 0.176359, 0.179971, 0.184041, 0.188741, 0.19496, 0.201702])
xs_exp_limits = array('d', [9.61372, 6.94123, 5.89102, 5.37004, 4.656325, 3.76967, 3.054805, 2.679795, 2.372195, 1.93964, 1.718555, 1.503075, 1.312415, 1.096825, 1.033265, 0.893457, 0.8038545, 0.728714, 0.673936, 0.5897995, 0.5190235, 0.496699, 0.4789045, 0.434043, 0.412885, 0.371281, 0.3372625, 0.2979355, 0.287519, 0.2716795, 0.247283, 0.2467865, 0.235172, 0.2181435, 0.200803, 0.1926765, 0.1846865, 0.178526, 0.1733965, 0.1671675, 0.1580895, 0.1575615, 0.1544575, 0.156659, 0.151003, 0.1496475, 0.147158, 0.146553, 0.150742, 0.1542635, 0.158712, 0.1605845, 0.1618275, 0.168154, 0.1724795, 0.178412, 0.1830205, 0.18977])

masses_exp = array('d', [1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0, 7000.0, 6900.0, 6800.0, 6700.0, 6600.0, 6500.0, 6400.0, 6300.0, 6200.0, 6100.0, 6000.0, 5900.0, 5800.0, 5700.0, 5600.0, 5500.0, 5400.0, 5300.0, 5200.0, 5100.0, 5000.0, 4900.0, 4800.0, 4700.0, 4600.0, 4500.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0])
xs_exp_limits_1sigma = array('d', [4.44056549, 3.4943643, 3.2034187, 2.69289728, 2.4582343, 2.22745348, 1.81458309, 1.60800879, 1.46753462, 1.28488911, 1.12514441, 0.939660559, 0.856249657, 0.74461341, 0.676470931, 0.589625158, 0.518973219, 0.475688585, 0.451244738, 0.41643092, 0.371436439, 0.354623593, 0.341107775, 0.31424668, 0.283553157, 0.262344002, 0.246577166, 0.23066867, 0.219448275, 0.205189239, 0.194966668, 0.193920431, 0.182538316, 0.172034496, 0.1547397, 0.152286649, 0.145943272, 0.142001808, 0.139363262, 0.137597404, 0.134292591, 0.136315326, 0.132570852, 0.132477946, 0.130398957, 0.129725876, 0.129488603, 0.129421566, 0.132038691, 0.13446517, 0.138215896, 0.141222087, 0.142817436, 0.146805019, 0.151099143, 0.154162373, 0.158645728, 0.165085834, 0.233580661, 0.226287422, 0.221531813, 0.218545923, 0.209892018, 0.205470736, 0.209690928, 0.200670023, 0.188994043, 0.194114875, 0.18539903, 0.185533607, 0.193232934, 0.199135806, 0.207183093, 0.198006422, 0.205023098, 0.209588972, 0.213483301, 0.222751318, 0.232335166, 0.241835347, 0.250511683, 0.274966658, 0.294100615, 0.340529385, 0.340500644, 0.346171738, 0.386507432, 0.411688803, 0.441583875, 0.480014447, 0.526172185, 0.566684183, 0.678078161, 0.685881683, 0.722851625, 0.810872945, 0.893526321, 0.977910035, 1.09156483, 1.25414112, 1.4709642, 1.67447751, 1.87915332, 2.14208744, 2.43902421, 2.69322484, 3.02160644, 3.68033554, 4.25039533, 5.29343838, 6.37987483, 8.63536239, 10.7155668, 11.5819715, 14.5426577, 19.9191709])
xs_exp_limits_2sigma = array('d', [2.5878515, 1.99269253, 1.82531, 1.5907267, 1.43061129, 1.3851319, 1.18113946, 1.14234559, 0.961825795, 0.94127232, 0.780980223, 0.627539179, 0.593014469, 0.513754893, 0.487513242, 0.463448917, 0.417599753, 0.374344371, 0.363941988, 0.334029174, 0.305468712, 0.285587317, 0.269319265, 0.248367899, 0.235482102, 0.223537435, 0.207039849, 0.192112812, 0.181097096, 0.16619129, 0.159183896, 0.150554536, 0.139527618, 0.139374383, 0.134709665, 0.133024782, 0.129920466, 0.127254156, 0.126535916, 0.127021856, 0.126235111, 0.126946973, 0.126005014, 0.12528653, 0.124853746, 0.125266814, 0.124627379, 0.123904749, 0.125632166, 0.126815101, 0.127997289, 0.129480198, 0.130688014, 0.134029047, 0.136753374, 0.138412778, 0.139510308, 0.142180297, 0.321876776, 0.310027142, 0.301473419, 0.298779887, 0.271495063, 0.261489275, 0.261971602, 0.269703179, 0.247602002, 0.258995077, 0.246895223, 0.251103001, 0.255883651, 0.257984397, 0.275307326, 0.265484109, 0.26479686, 0.287043052, 0.30488969, 0.302717511, 0.31684741, 0.338167189, 0.344751536, 0.360088253, 0.40101638, 0.485706899, 0.512066753, 0.503553339, 0.50914776, 0.567259281, 0.601579807, 0.661600083, 0.714997531, 0.771327644, 0.942988959, 1.0771223, 1.06052232, 1.10251945, 1.24168477, 1.40779562, 1.55495092, 1.75604614, 2.24416017, 2.64979405, 2.71654264, 3.12991693, 3.6717628, 4.17637779, 4.47252359, 5.21547966, 6.43895784, 9.10979692, 10.2825003, 13.4565782, 16.6110522, 18.5953493, 24.6820557, 35.3225356])

if syst:
  masses = array('d', [1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0])
  xs_obs_limits = array('d', [27.1354, 28.0486, 23.1952, 7.66399, 6.66318, 4.2431, 2.75343, 2.92923, 3.05669, 2.89836, 2.64247, 2.56632, 2.58981, 2.52313, 2.1343, 1.85208, 1.66508, 1.54797, 1.41326, 1.22933, 1.03239, 0.846609, 0.61665, 0.482541, 0.398572, 0.339684, 0.30048, 0.281819, 0.2726, 0.254657, 0.239311, 0.222006, 0.211599, 0.212447, 0.213421, 0.213232, 0.21268, 0.210574, 0.20759, 0.205145, 0.202155, 0.200062, 0.197779, 0.191965, 0.185101, 0.182324, 0.177934, 0.17421, 0.17401, 0.176651, 0.178677, 0.178316, 0.178916, 0.185913, 0.188667, 0.192998, 0.196914, 0.204604])
  xs_exp_limits = array('d', [22.7976, 15.7063, 12.12805, 10.81735, 8.65517, 7.48523, 5.90863, 5.09098, 4.327825, 3.476615, 3.00473, 2.45701, 2.12225, 1.811485, 1.634625, 1.376665, 1.138415, 0.971314, 0.851095, 0.810085, 0.714648, 0.650442, 0.60375, 0.542154, 0.5037355, 0.4557655, 0.4269255, 0.3581015, 0.338192, 0.311004, 0.288367, 0.286189, 0.2697745, 0.2424045, 0.217351, 0.203468, 0.190655, 0.18663, 0.177175, 0.173205, 0.165206, 0.1623055, 0.1629145, 0.1583225, 0.153909, 0.1536985, 0.150436, 0.148371, 0.1536045, 0.159338, 0.1615235, 0.165185, 0.1659995, 0.171207, 0.175905, 0.1806045, 0.186136, 0.192096])

  masses_exp = array('d', [1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5600.0, 5700.0, 5800.0, 5900.0, 6000.0, 6100.0, 6200.0, 6300.0, 6400.0, 6500.0, 6600.0, 6700.0, 6800.0, 6900.0, 7000.0, 7000.0, 6900.0, 6800.0, 6700.0, 6600.0, 6500.0, 6400.0, 6300.0, 6200.0, 6100.0, 6000.0, 5900.0, 5800.0, 5700.0, 5600.0, 5500.0, 5400.0, 5300.0, 5200.0, 5100.0, 5000.0, 4900.0, 4800.0, 4700.0, 4600.0, 4500.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0])
  xs_exp_limits_1sigma = array('d', [10.9352641, 8.57028726, 6.97503576, 7.13982126, 5.60264929, 5.28149482, 4.17722636, 3.59523064, 3.06360896, 2.52809209, 2.15715825, 1.74988296, 1.41565244, 1.20400137, 1.09599066, 0.936494625, 0.777052765, 0.666292232, 0.621270816, 0.562997946, 0.510148442, 0.44048223, 0.424703266, 0.401877078, 0.371298346, 0.32785108, 0.297009715, 0.268270097, 0.249046036, 0.230652024, 0.221504926, 0.212777337, 0.200062679, 0.182237955, 0.164804951, 0.154165226, 0.146789902, 0.142362116, 0.139254168, 0.138089417, 0.135551828, 0.134066797, 0.134397336, 0.132562932, 0.131676876, 0.132809584, 0.129470808, 0.128995348, 0.134447833, 0.136535137, 0.138873057, 0.141818896, 0.146153808, 0.150824629, 0.153861553, 0.158381324, 0.16211015, 0.167534688, 0.244293568, 0.236846158, 0.232721849, 0.228650217, 0.21663718, 0.203898824, 0.204314216, 0.206486248, 0.202751936, 0.200998015, 0.190358676, 0.198054663, 0.19846337, 0.206913279, 0.212934347, 0.210589325, 0.215647392, 0.221704768, 0.232207319, 0.235589936, 0.249696984, 0.260924854, 0.275494124, 0.301847973, 0.332321917, 0.363771147, 0.390619591, 0.404018814, 0.431979536, 0.46860056, 0.52459337, 0.580663186, 0.641026956, 0.703320351, 0.809994672, 0.91195158, 0.918169846, 1.01953004, 1.13962406, 1.25279248, 1.41819176, 1.61795693, 1.95976425, 2.32213271, 2.66154079, 2.97088136, 3.67983148, 4.20159686, 5.02496521, 5.91830948, 7.16033256, 8.75888478, 10.4769572, 12.9758865, 16.2204876, 20.0529094, 27.5610352, 45.0100516])
  xs_exp_limits_2sigma = array('d', [6.7625772, 5.17570754, 4.71148754, 4.43467736, 3.75309682, 3.37676088, 2.84179656, 2.5163773, 2.26230321, 1.92195435, 1.60223357, 1.30856606, 1.0760956, 0.921823114, 0.817427957, 0.67475691, 0.613472762, 0.53560162, 0.479638754, 0.438534567, 0.404993146, 0.357698262, 0.340529686, 0.31296536, 0.293405407, 0.254752053, 0.238941276, 0.218762088, 0.201795278, 0.186229674, 0.175701318, 0.170574916, 0.157458756, 0.145620235, 0.143960597, 0.13164207, 0.126788075, 0.124166772, 0.123131348, 0.124184859, 0.123139461, 0.121230378, 0.123154193, 0.121178822, 0.122743998, 0.121127802, 0.119670425, 0.119800024, 0.122310054, 0.125100667, 0.127850339, 0.130016666, 0.133806696, 0.13794334, 0.141888564, 0.145366882, 0.148124716, 0.152846982, 0.338834448, 0.329985408, 0.327778329, 0.303790529, 0.2960769, 0.277622807, 0.281603876, 0.288058012, 0.274482163, 0.279861874, 0.266081162, 0.26837535, 0.270691548, 0.285368685, 0.29302121, 0.288767001, 0.293605361, 0.30893293, 0.3060821, 0.32118292, 0.34267134, 0.366571958, 0.388140396, 0.428877573, 0.450184701, 0.509284476, 0.560850406, 0.536360206, 0.642542746, 0.681250912, 0.68673471, 0.821822022, 0.912042262, 0.991285581, 1.11066276, 1.32340028, 1.31743814, 1.44701614, 1.53281809, 1.65112753, 1.96637224, 2.25855294, 2.87992815, 3.25700356, 3.57315736, 4.2424506, 5.15749386, 5.90924571, 6.94342866, 7.91935572, 9.94564792, 11.6252768, 15.237985, 18.8994713, 22.890812, 30.6182684, 47.1489588, 68.490674])

##
########################################################

massesS8 = array('d', [1000.0,1100.0,1200.0,1300.0,1400.0,1500.0,1600.0,1700.0,1800.0,1900.0,2000.0,2100.0,2200.0,2300.0,2400.0,2500.0,2600.0,2700.0,2800.0,2900.0,3000.0,3100.0,3200.0,3300.0,3400.0,3500.0,3600.0,3700.0,3800.0,3900.0,4000.0,4100.0,4200.0,4300.0,4400.0,4500.0,4600.0,4700.0,4800.0,4900.0,5000.0,5100.0,5200.0,5300.0,5400.0,5500.0,5600.0,5700.0,5800.0,5900.0,6000.0])
xsS8 = array('d', [5.46E+02,3.12E+02,1.85E+02,1.12E+02,7.19E+01,4.59E+01,3.02E+01,2.01E+01,1.37E+01,9.46E+00,6.55E+00,4.64E+00,3.27E+00,2.36E+00,1.70E+00,1.24E+00,9.11E-01,6.69E-01,4.97E-01,3.71E-01,2.78E-01,2.07E-01,1.55E-01,1.19E-01,9.26E-02,7.08E-02,5.43E-02,4.15E-02,3.22E-02,2.50E-02,1.92E-02,1.51E-02,1.19E-02,9.25E-03,7.35E-03,5.86E-03,4.53E-03,3.66E-03,2.91E-03,2.33E-03,1.86E-03,1.45E-03,1.12E-03,8.75E-04,6.90E-04,5.55E-04,4.47E-04,3.63E-04,2.92E-04,2.37E-04,1.97E-04])

graph_xsS8 = TGraph(len(massesS8),massesS8,xsS8)
graph_xsS8.SetLineWidth(3)
graph_xsS8.SetLineStyle(8)
graph_xsS8.SetLineColor(6)

graph_exp_2sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_2sigma)
graph_exp_2sigma.SetFillColor(kYellow)
graph_exp_2sigma.GetXaxis().SetTitle("gg resonance mass [GeV]")
graph_exp_2sigma.GetYaxis().SetTitle("#sigma #times #it{B} #times #it{A} [pb]")
graph_exp_2sigma.GetYaxis().SetTitleOffset(1.1)
graph_exp_2sigma.GetYaxis().SetRangeUser(1e-02,1e+03)
#graph_exp_2sigma.GetXaxis().SetNdivisions(1005)

graph_exp_1sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_1sigma)
graph_exp_1sigma.SetFillColor(kGreen+1)

graph_exp = TGraph(len(masses),masses,xs_exp_limits)
#graph_exp.SetMarkerStyle(24)
graph_exp.SetLineWidth(3)
graph_exp.SetLineStyle(2)
graph_exp.SetLineColor(4)

graph_obs = TGraph(len(masses),masses,xs_obs_limits)
graph_obs.SetMarkerStyle(20)
graph_obs.SetLineWidth(3)
#graph_obs.SetLineStyle(1)
graph_obs.SetLineColor(1)


c = TCanvas("c", "",800,800)
c.cd()

graph_exp_2sigma.Draw("AF")
graph_exp_1sigma.Draw("F")
graph_exp.Draw("L")
graph_obs.Draw("LP")
graph_xsS8.Draw("L")

legend = TLegend(.60,.55,.90,.70)
legend.SetBorderSize(0)
legend.SetFillColor(0)
legend.SetFillStyle(0)
legend.SetTextFont(42)
legend.SetTextSize(0.03)
legend.SetHeader('95% CL upper limits')
legend.AddEntry(graph_obs,"Observed","lp")
legend.AddEntry(graph_exp,"Expected","lp")
legend.AddEntry(graph_exp_1sigma,"#pm 1#sigma","F")
legend.AddEntry(graph_exp_2sigma,"#pm 2#sigma","F")
legend.Draw()

legendTh = TLegend(.60,.80,.90,.84)
legendTh.SetBorderSize(0)
legendTh.SetFillColor(0)
legendTh.SetFillStyle(0)
legendTh.SetTextFont(42)
legendTh.SetTextSize(0.03)
legendTh.AddEntry(graph_xsS8,"S8","l")
legendTh.Draw()

#l1 = TLatex()
#l1.SetTextAlign(12)
#l1.SetTextFont(42)
#l1.SetNDC()
#l1.SetTextSize(0.04)
#l1.SetTextSize(0.04)
#l1.DrawLatex(0.18,0.40, "CMS Preliminary")
#l1.DrawLatex(0.18,0.32, "#intLdt = 1 fb^{-1}")
#l1.DrawLatex(0.19,0.27, "#sqrt{s} = 13 TeV")

#draw the lumi text on the canvas
CMS_lumi.extraText = "Preliminary"
CMS_lumi.lumi_sqrtS = "40.2 pb^{-1} (13 TeV)" # used with iPeriod = 0, e.g. for simulation-only plots (default is an empty string)
iPos = 11
iPeriod = 0

CMS_lumi.CMS_lumi(c, iPeriod, iPos)

gPad.RedrawAxis()

c.SetLogy()
c.SaveAs('xs_limit_DijetLimitCode_gg' + ('_NoSyst' if not syst else '') + '_Run2_13TeV_DATA_40p2_invpb.eps')
