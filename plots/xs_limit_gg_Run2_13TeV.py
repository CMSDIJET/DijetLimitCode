#!/usr/bin/env python

import sys, os, subprocess, string, re
from ROOT import *
from array import array
import CMS_lumi


gROOT.SetBatch(kTRUE);
gStyle.SetOptStat(0)
gStyle.SetOptTitle(0)
gStyle.SetTitleFont(42, "XYZ")
gStyle.SetTitleSize(0.06, "XYZ")
gStyle.SetLabelFont(42, "XYZ")
gStyle.SetLabelSize(0.05, "XYZ")
gStyle.SetCanvasBorderMode(0)
gStyle.SetFrameBorderMode(0)
gStyle.SetCanvasColor(kWhite)
gStyle.SetPadTickX(1)
gStyle.SetPadTickY(1)
gStyle.SetPadLeftMargin(0.15)
gStyle.SetPadRightMargin(0.05)
gStyle.SetPadTopMargin(0.05)
gStyle.SetPadBottomMargin(0.15)
gROOT.ForceStyle()

masses = array('d')
xs_obs_limits = array('d')
xs_exp_limits = array('d')
masses_exp = array('d')
xs_exp_limits_1sigma = array('d')
xs_exp_limits_1sigma_up = array('d')
xs_exp_limits_2sigma = array('d')
xs_exp_limits_2sigma_up = array('d')


#syst = True
syst = False

mass_min = 1300
mass_max = 5500

########################################################
## Uncomment this part if running the limit code


### for running the limit code
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #cmd = "./stats " + str(int(mass)) + " gg | tee stats_" + str(int(mass)) + "_gg.log"
  #print "Running: " + cmd
  #proc = subprocess.Popen( cmd, shell=True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT )
  #output = proc.communicate()[0]
  #if proc.returncode != 0:
    #print output
    #sys.exit(1)
  ##print output

  #outputlines = output.split("\n")

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

### for reading the limit code log files
#for mass in range(mass_min,mass_max+100,100):

  #masses.append(float(mass))
  #masses_exp.append(float(mass))

  #log_file = open("stats_" + str(int(mass)) + "_gg.log",'r')
  #outputlines = log_file.readlines()
  #log_file.close()

  #for line in outputlines:
    #if re.search("observed bound =", line):
      #xs_obs_limits.append(float(line.split()[6]))
    #if re.search("median:", line):
      #xs_exp_limits.append(float(line.split()[1]))
    #if re.search("1 sigma band:", line):
      #xs_exp_limits_1sigma.append(float(line.split()[4]))
      #xs_exp_limits_1sigma_up.append(float(line.split()[6]))
    #if re.search("2 sigma band:", line):
      #xs_exp_limits_2sigma.append(float(line.split()[4]))
      #xs_exp_limits_2sigma_up.append(float(line.split()[6]))

##------------------------------------------------------

#for i in range(0,len(masses)):
  #masses_exp.append( masses[len(masses)-i-1] )
  #xs_exp_limits_1sigma.append( xs_exp_limits_1sigma_up[len(masses)-i-1] )
  #xs_exp_limits_2sigma.append( xs_exp_limits_2sigma_up[len(masses)-i-1] )


#print "masses =", masses
#print "xs_obs_limits =", xs_obs_limits
#print "xs_exp_limits =", xs_exp_limits
#print ""
#print "masses_exp =", masses_exp
#print "xs_exp_limits_1sigma =", xs_exp_limits_1sigma
#print "xs_exp_limits_2sigma =", xs_exp_limits_2sigma

##
########################################################

########################################################
## Comment out this part if running the limit code

masses = array('d', [1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0])
xs_obs_limits = array('d', [5.90412, 24.8042, 18.3176, 7.17719, 4.19916, 1.98404, 1.19833, 1.46079, 1.71165, 1.33612, 1.17315, 1.14401, 1.44153, 1.62837, 1.36941, 1.34004, 1.42824, 1.44795, 1.35705, 1.10115, 0.828976, 0.660172, 0.458337, 0.385381, 0.355388, 0.332631, 0.310094, 0.302969, 0.293327, 0.274843, 0.254422, 0.234144, 0.222194, 0.228776, 0.234352, 0.238696, 0.237315, 0.233928, 0.230453, 0.230717, 0.223965, 0.216521, 0.210162])
xs_exp_limits = array('d', [9.79282, 7.62507, 6.703235, 5.51467, 4.74207, 3.671345, 3.194125, 2.82396, 2.235, 2.025325, 1.747005, 1.608285, 1.37957, 1.14505, 1.008255, 0.8711925, 0.8048135, 0.7139645, 0.6407455, 0.58749, 0.5356085, 0.507517, 0.474179, 0.4520175, 0.4212405, 0.400004, 0.3629105, 0.3306745, 0.2973345, 0.2781095, 0.263274, 0.2599575, 0.2412745, 0.222197, 0.2122655, 0.2033305, 0.188874, 0.186582, 0.18188, 0.171405, 0.1658715, 0.169089, 0.1615145])

masses_exp = array('d', [1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4500.0, 4600.0, 4700.0, 4800.0, 4900.0, 5000.0, 5100.0, 5200.0, 5300.0, 5400.0, 5500.0, 5500.0, 5400.0, 5300.0, 5200.0, 5100.0, 5000.0, 4900.0, 4800.0, 4700.0, 4600.0, 4500.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0])
xs_exp_limits_1sigma = array('d', [4.25269701, 3.5814807, 3.12437044, 2.87295598, 2.524546, 2.25136398, 1.94684076, 1.75983907, 1.45069696, 1.37914387, 1.18551872, 1.06788417, 0.919481943, 0.778911719, 0.655908731, 0.616409289, 0.545025364, 0.504277479, 0.458636845, 0.430695501, 0.405511081, 0.369503799, 0.343968719, 0.325385351, 0.296381838, 0.27495425, 0.255083737, 0.246075969, 0.229335582, 0.220690087, 0.21055097, 0.202712537, 0.193381576, 0.1849071, 0.161190497, 0.156253169, 0.150726081, 0.151102573, 0.148482896, 0.142830458, 0.141133437, 0.1414601, 0.139885441, 0.214788948, 0.222304556, 0.22769444, 0.22653568, 0.245063735, 0.25124408, 0.258628903, 0.269333267, 0.283539933, 0.323472124, 0.346914222, 0.366784086, 0.385603267, 0.401571736, 0.432047538, 0.476397509, 0.513771899, 0.562343783, 0.617472894, 0.69430656, 0.739033163, 0.780014976, 0.848377924, 0.93703286, 0.954776487, 1.06456712, 1.21852308, 1.42441245, 1.61429439, 1.91318415, 2.10268397, 2.52811108, 3.02916001, 3.26131476, 3.84564242, 4.81602732, 5.49044447, 6.43498751, 8.67315715, 10.7377752, 13.4014049, 15.7384751, 21.7225561])
xs_exp_limits_2sigma = array('d', [2.5722479, 2.2851025, 1.95863055, 1.68005806, 1.54218572, 1.4140722, 1.30817114, 1.13901616, 0.976131144, 0.960673715, 0.91121753, 0.777026061, 0.608712259, 0.543462454, 0.49370271, 0.47831404, 0.435547004, 0.414351898, 0.396581195, 0.348773331, 0.328403935, 0.305661154, 0.277716293, 0.261595371, 0.246864899, 0.239033684, 0.219345929, 0.210573487, 0.183215142, 0.171339318, 0.171534889, 0.155856939, 0.153927138, 0.15140098, 0.142513697, 0.13759286, 0.134954175, 0.13348332, 0.131868257, 0.130153194, 0.131165257, 0.130454527, 0.129498781, 0.287066032, 0.29774787, 0.314671997, 0.306965212, 0.328498813, 0.343953141, 0.353773202, 0.361704286, 0.376417367, 0.452584538, 0.469860758, 0.508702085, 0.521346451, 0.570153744, 0.613432555, 0.666742248, 0.72248531, 0.808388934, 0.87628648, 0.948912422, 1.02316046, 1.14984979, 1.22707052, 1.25639907, 1.43007469, 1.68651432, 1.77035394, 2.19060321, 2.63146467, 2.9343295, 3.27797507, 3.81838354, 4.25540585, 4.82752339, 5.78027958, 6.97663754, 8.68026272, 10.6078858, 13.0445512, 15.7489113, 18.9823185, 24.5480007, 34.1899871])

if syst:
  xs_obs_limits = array('d', [48.9834, 15.5104, 1.48702, 2.1846, 5.88462, 4.96351, 3.43921, 1.46977, 0.883418, 0.670762, 0.589426, 0.47658, 0.352378, 0.360963, 0.457307, 0.493142, 0.474156, 0.420971, 0.35761, 0.307648, 0.277725, 0.282715, 0.288767, 0.264133, 0.225759, 0.172839, 0.132423, 0.108127, 0.0957965, 0.0948413, 0.108401, 0.112502, 0.109777, 0.0974121, 0.0797746, 0.0690627, 0.0622704, 0.0600981, 0.0564474, 0.052898, 0.0471089, 0.0400551, 0.0312469, 0.0253978, 0.0195747, 0.0157275, 0.0143459, 0.0125606, 0.011287, 0.0106264, 0.0101563, 0.00984405, 0.00977102, 0.00969628, 0.00980263, 0.00980642, 0.0100955, 0.0103283, 0.010417])
  xs_exp_limits = array('d', [14.3099, 7.80575, 4.45056, 4.424585, 3.6377, 2.577925, 2.109985, 1.5597, 1.276695, 1.02019, 0.9100545, 0.786793, 0.7137335, 0.6000835, 0.5186635, 0.496075, 0.444928, 0.383262, 0.330726, 0.3006895, 0.262522, 0.22892, 0.2040955, 0.172871, 0.157564, 0.13855, 0.126422, 0.1122625, 0.103113, 0.0875804, 0.07824025, 0.06682445, 0.0597073, 0.052169, 0.04806775, 0.04278875, 0.0397887, 0.0375644, 0.03554385, 0.03150335, 0.02964935, 0.0292615, 0.026412, 0.024826, 0.02543485, 0.0240541, 0.0209813, 0.0195814, 0.01894845, 0.01835845, 0.0179551, 0.01763815, 0.01726835, 0.0169003, 0.0166459, 0.0164321, 0.01632505, 0.0163281, 0.01661895])

  xs_exp_limits_1sigma = array('d', [2.56493492, 2.83458845, 2.32409972, 2.05225481, 1.67727176, 1.45120726, 1.35074016, 1.04869716, 0.835099745, 0.674395988, 0.617253083, 0.537245224, 0.497696776, 0.40802234, 0.340796217, 0.315187176, 0.294744272, 0.264703589, 0.229386305, 0.207861304, 0.181237076, 0.153709666, 0.142511739, 0.122220275, 0.110817011, 0.101071186, 0.0917952184, 0.0741336369, 0.0674604932, 0.0622635488, 0.0520745794, 0.0474941539, 0.0421285403, 0.0371836546, 0.0360080877, 0.0328409931, 0.0294604143, 0.0263618699, 0.0246473405, 0.0231908832, 0.020965666, 0.0206074036, 0.0188818234, 0.018060254, 0.0176289556, 0.0173504402, 0.0151565744, 0.0143721406, 0.0139363972, 0.0136824896, 0.0133579346, 0.0131831867, 0.012877044, 0.012832874, 0.0126735508, 0.0126557922, 0.0125219301, 0.0125476792, 0.0126247755, 0.0232433055, 0.022587722, 0.0226411993, 0.0227894277, 0.0228645962, 0.0233129708, 0.0239580518, 0.0244286593, 0.0250102105, 0.0256316961, 0.0268846375, 0.0284367886, 0.030573988, 0.03544631, 0.0363187244, 0.0366766312, 0.0396468895, 0.0406170176, 0.0444826447, 0.0484292445, 0.0504144333, 0.0549356352, 0.0611562999, 0.063368306, 0.0736992667, 0.0728134469, 0.089909194, 0.0966368224, 0.117054776, 0.125518723, 0.141839678, 0.160395085, 0.17561886, 0.191165132, 0.216048656, 0.23447619, 0.286991428, 0.317906102, 0.373177254, 0.400404664, 0.459667158, 0.540911671, 0.667035067, 0.715373866, 0.821116345, 0.893347822, 0.954853637, 1.17590648, 1.31631501, 1.48424009, 1.7630136, 2.19508442, 3.1005472, 3.8893273, 5.69440046, 8.17211559, 9.30041061, 15.5448007, 34.0730564])
  xs_exp_limits_2sigma = array('d', [1.38566812, 1.3879146, 1.35699786, 1.20289155, 1.07244516, 0.905186793, 0.888178219, 0.713563262, 0.617313821, 0.427628702, 0.406229852, 0.394498218, 0.347426075, 0.298293469, 0.256643022, 0.224704738, 0.211717018, 0.187717856, 0.171913272, 0.139394502, 0.13012329, 0.118167016, 0.0996579274, 0.0855879404, 0.0817169121, 0.0721123663, 0.0623783234, 0.0552035218, 0.0551665686, 0.0461683033, 0.0400114372, 0.0342258826, 0.0298461237, 0.0283681608, 0.0274584635, 0.0247169155, 0.0230495914, 0.0207022581, 0.0190994646, 0.0171064259, 0.0169142076, 0.015875145, 0.0150136268, 0.0148775788, 0.0137758709, 0.013281691, 0.0127866742, 0.0121620738, 0.0115007729, 0.010829962, 0.0108476742, 0.0108722533, 0.0105802597, 0.0104223258, 0.0103229266, 0.0103168322, 0.0102974143, 0.0104605362, 0.0107567767, 0.0283434241, 0.0283690566, 0.0287980584, 0.0289707937, 0.0290293674, 0.0296972104, 0.031464378, 0.0322515314, 0.0338615339, 0.0359638341, 0.0382901826, 0.0413137443, 0.0431983945, 0.0497559514, 0.0467459181, 0.0523248812, 0.0546665027, 0.0569467262, 0.0617625475, 0.0645573083, 0.0694240902, 0.0795294253, 0.08382191, 0.0986314858, 0.092823539, 0.097616689, 0.118520704, 0.120703978, 0.150455489, 0.16662966, 0.1782864, 0.19913798, 0.232389664, 0.263025844, 0.286121123, 0.330581038, 0.367592062, 0.444805242, 0.521655236, 0.557675657, 0.608720355, 0.732134052, 0.834282289, 0.971418581, 1.18906958, 1.2132386, 1.33018102, 1.60148834, 1.90436862, 2.0155069, 2.53957499, 3.2688359, 3.94388003, 5.36931968, 7.68399676, 10.9121722, 13.2950295, 20.4851979, 44.0914108])

##
########################################################

massesS8 = array('d', [1000.0,1100.0,1200.0,1300.0,1400.0,1500.0,1600.0,1700.0,1800.0,1900.0,2000.0,2100.0,2200.0,2300.0,2400.0,2500.0,2600.0,2700.0,2800.0,2900.0,3000.0,3100.0,3200.0,3300.0,3400.0,3500.0,3600.0,3700.0,3800.0,3900.0,4000.0,4100.0,4200.0,4300.0,4400.0,4500.0,4600.0,4700.0,4800.0,4900.0,5000.0,5100.0,5200.0,5300.0,5400.0,5500.0,5600.0,5700.0,5800.0,5900.0,6000.0])
xsS8 = array('d', [5.46E+02,3.12E+02,1.85E+02,1.12E+02,7.19E+01,4.59E+01,3.02E+01,2.01E+01,1.37E+01,9.46E+00,6.55E+00,4.64E+00,3.27E+00,2.36E+00,1.70E+00,1.24E+00,9.11E-01,6.69E-01,4.97E-01,3.71E-01,2.78E-01,2.07E-01,1.55E-01,1.19E-01,9.26E-02,7.08E-02,5.43E-02,4.15E-02,3.22E-02,2.50E-02,1.92E-02,1.51E-02,1.19E-02,9.25E-03,7.35E-03,5.86E-03,4.53E-03,3.66E-03,2.91E-03,2.33E-03,1.86E-03,1.45E-03,1.12E-03,8.75E-04,6.90E-04,5.55E-04,4.47E-04,3.63E-04,2.92E-04,2.37E-04,1.97E-04])

graph_xsS8 = TGraph(len(massesS8),massesS8,xsS8)
graph_xsS8.SetLineWidth(3)
graph_xsS8.SetLineStyle(8)
graph_xsS8.SetLineColor(6)

graph_exp_2sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_2sigma)
graph_exp_2sigma.SetFillColor(kYellow)
graph_exp_2sigma.GetXaxis().SetTitle("gg resonance mass [GeV]")
graph_exp_2sigma.GetYaxis().SetTitle("#sigma#timesBR(X#rightarrowjj)#timesA [pb]")
graph_exp_2sigma.GetYaxis().SetRangeUser(1e-02,1e+03)
#graph_exp_2sigma.GetXaxis().SetNdivisions(1005)

graph_exp_1sigma = TGraph(len(masses_exp),masses_exp,xs_exp_limits_1sigma)
graph_exp_1sigma.SetFillColor(kGreen+1)

graph_exp = TGraph(len(masses),masses,xs_exp_limits)
#graph_exp.SetMarkerStyle(24)
graph_exp.SetLineWidth(3)
graph_exp.SetLineStyle(2)
graph_exp.SetLineColor(4)

graph_obs = TGraph(len(masses),masses,xs_obs_limits)
graph_obs.SetMarkerStyle(20)
graph_obs.SetLineWidth(2)
#graph_obs.SetLineStyle(1)
graph_obs.SetLineColor(1)


c = TCanvas("c", "",800,800)
c.cd()

graph_exp_2sigma.Draw("AF")
graph_exp_1sigma.Draw("F")
graph_exp.Draw("L")
graph_obs.Draw("LP")
graph_xsS8.Draw("L")

legend = TLegend(.50,.55,.80,.73)
legend.SetBorderSize(0)
legend.SetFillColor(0)
legend.SetFillStyle(0)
legend.SetTextFont(42)
legend.SetTextSize(0.03)
legend.SetHeader('95% CL upper limits' + ('' if syst else ' (stat. only)'))
legend.AddEntry(graph_obs,"Observed (pseudo-data)","lp")
legend.AddEntry(graph_exp,"Expected","lp")
legend.AddEntry(graph_exp_1sigma,"#pm 1#sigma","F")
legend.AddEntry(graph_exp_2sigma,"#pm 2#sigma","F")
legend.Draw()

legendTh = TLegend(.50,.80,.80,.84)
legendTh.SetBorderSize(0)
legendTh.SetFillColor(0)
legendTh.SetFillStyle(0)
legendTh.SetTextFont(42)
legendTh.SetTextSize(0.03)
legendTh.AddEntry(graph_xsS8,"S8","l")
legendTh.Draw()

#l1 = TLatex()
#l1.SetTextAlign(12)
#l1.SetTextFont(42)
#l1.SetNDC()
#l1.SetTextSize(0.04)
#l1.SetTextSize(0.04)
#l1.DrawLatex(0.18,0.40, "CMS Preliminary")
#l1.DrawLatex(0.18,0.32, "#intLdt = 1 fb^{-1}")
#l1.DrawLatex(0.19,0.27, "#sqrt{s} = 13 TeV")

#draw the lumi text on the canvas
CMS_lumi.extraText = "Preliminary"
CMS_lumi.lumi_sqrtS = "37 pb^{-1} (13 TeV)" # used with iPeriod = 0, e.g. for simulation-only plots (default is an empty string)
iPos = 11
iPeriod = 0

CMS_lumi.CMS_lumi(c, iPeriod, iPos)

gPad.RedrawAxis()

c.SetLogy()
c.SaveAs('xs_limit_DijetLimitCode_gg_exp' + ('_syst' if syst else '') + '_Run2_13TeV_DATA_37_invpb.eps')
